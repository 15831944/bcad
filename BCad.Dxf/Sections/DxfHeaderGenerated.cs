// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;

namespace BCad.Dxf
{
    public partial class DxfHeader
    {
        internal DxfHeader()
        {
            SetDefaults();
        }

        // key names
        private const string ACADMAINTVER = "$ACADMAINTVER";
        private const string ACADVER = "$ACADVER";
        private const string ANGBASE = "$ANGBASE";
        private const string ANGDIR = "$ANGDIR";
        private const string ATTDIA = "$ATTDIA";
        private const string ATTMODE = "$ATTMODE";
        private const string ATTREQ = "$ATTREQ";
        private const string AUNITS = "$AUNITS";
        private const string AUPREC = "$AUPREC";
        private const string BLIPMODE = "$BLIPMODE";
        private const string CECOLOR = "$CECOLOR";
        private const string CELTSCALE = "$CELTSCALE";
        private const string CELTYPE = "$CELTYPE";
        private const string CHAMFERA = "$CHAMFERA";
        private const string CHAMFERB = "$CHAMFERB";
        private const string CHAMFERC = "$CHAMFERC";
        private const string CHAMFERD = "$CHAMFERD";
        private const string CLAYER = "$CLAYER";
        private const string CMLJUST = "$CMLJUST";
        private const string CMLSCALE = "$CMLSCALE";
        private const string CMLSTYLE = "$CMLSTYLE";
        private const string COORDS = "$COORDS";
        private const string DELOBJ = "$DELOBJ";
        private const string DIMALT = "$DIMALT";
        private const string DIMALTD = "$DIMALTD";
        private const string DIMALTF = "$DIMALTF";
        private const string DIMALTTD = "$DIMALTTD";
        private const string DIMALTTZ = "$DIMALTTZ";
        private const string DIMALTU = "$DIMALTU";
        private const string DIMALTZ = "$DIMALTZ";
        private const string DIMAPOST = "$DIMAPOST";
        private const string DIMASO = "$DIMASO";
        private const string DIMASZ = "$DIMASZ";
        private const string DIMAUNIT = "$DIMAUNIT";
        private const string DIMBLK = "$DIMBLK";
        private const string DIMBLK1 = "$DIMBLK1";
        private const string DIMBLK2 = "$DIMBLK2";
        private const string DIMCEN = "$DIMCEN";
        private const string DIMCLRD = "$DIMCLRD";
        private const string DIMCLRE = "$DIMCLRE";
        private const string DIMCLRT = "$DIMCLRT";
        private const string DIMDEC = "$DIMDEC";
        private const string DIMDLE = "$DIMDLE";
        private const string DIMDLI = "$DIMDLI";
        private const string DIMEXE = "$DIMEXE";
        private const string DIMEXO = "$DIMEXO";
        private const string DIMFIT = "$DIMFIT";
        private const string DIMGAP = "$DIMGAP";
        private const string DIMJUST = "$DIMJUST";
        private const string DIMLFAC = "$DIMLFAC";
        private const string DIMLIM = "$DIMLIM";
        private const string DIMPOST = "$DIMPOST";
        private const string DIMRND = "$DIMRND";
        private const string DIMSAH = "$DIMSAH";
        private const string DIMSCALE = "$DIMSCALE";
        private const string DIMSD1 = "$DIMSD1";
        private const string DIMSD2 = "$DIMSD2";
        private const string DIMSHO = "$DIMSHO";
        private const string DIMSOXD = "$DIMSOXD";
        private const string DIMSTYLE = "$DIMSTYLE";
        private const string DIMTAD = "$DIMTAD";
        private const string DIMTDEC = "$DIMTDEC";
        private const string DIMTFAC = "$DIMTFAC";
        private const string DIMTIH = "$DIMTIH";
        private const string DIMTIX = "$DIMTIX";
        private const string DIMTM = "$DIMTM";
        private const string DIMTOFL = "$DIMTOFL";
        private const string DIMTOH = "$DIMTOH";
        private const string DIMTOL = "$DIMTOL";
        private const string DIMTOLJ = "$DIMTOLJ";
        private const string DIMTP = "$DIMTP";
        private const string DIMTSZ = "$DIMTSZ";
        private const string DIMTVP = "$DIMTVP";
        private const string DIMTXSTY = "$DIMTXSTY";
        private const string DIMTXT = "$DIMTXT";
        private const string DIMTZIN = "$DIMTZIN";
        private const string DIMUNIT = "$DIMUNIT";
        private const string DIMUPT = "$DIMUPT";
        private const string DIMZIN = "$DIMZIN";
        private const string DISPSILH = "$DISPSILH";
        private const string DRAGMODE = "$DRAGMODE";
        private const string DWGCODEPAGE = "$DWGCODEPAGE";
        private const string ELEVATION = "$ELEVATION";
        private const string EXTMAX = "$EXTMAX";
        private const string EXTMIN = "$EXTMIN";
        private const string FILLETRAD = "$FILLETRAD";
        private const string FILLMODE = "$FILLMODE";
        private const string HANDLING = "$HANDLING";
        private const string INSBASE = "$INSBASE";
        private const string LIMCHECK = "$LIMCHECK";
        private const string LIMMAX = "$LIMMAX";
        private const string LIMMIN = "$LIMMIN";
        private const string LTSCALE = "$LTSCALE";
        private const string LUNITS = "$LUNITS";
        private const string LUPREC = "$LUPREC";
        private const string MAXACTVP = "$MAXACTVP";
        private const string MEASUREMENT = "$MEASUREMENT";
        private const string MENU = "$MENU";
        private const string MIRRTEXT = "$MIRRTEXT";
        private const string ORTHOMODE = "$ORTHOMODE";
        private const string OSMODE = "$OSMODE";
        private const string PDMODE = "$PDMODE";
        private const string PDSIZE = "$PDSIZE";
        private const string PELEVATION = "$PELEVATION";
        private const string PEXTMAX = "$PEXTMAX";
        private const string PEXTMIN = "$PEXTMIN";
        private const string PICKSTYLE = "$PICKSTYLE";
        private const string PINSBASE = "$PINSBASE";
        private const string PLIMCHECK = "$PLIMCHECK";
        private const string PLIMMAX = "$PLIMMAX";
        private const string PLIMMIN = "$PLIMMIN";
        private const string PLINEGEN = "$PLINEGEN";
        private const string PLINEWID = "$PLINEWID";
        private const string PROXYGRAPHICS = "$PROXYGRAPHICS";
        private const string PSLTSCALE = "$PSLTSCALE";
        private const string PUCSNAME = "$PUCSNAME";
        private const string PUCSORG = "$PUCSORG";
        private const string PUCSXDIR = "$PUCSXDIR";
        private const string PUCSYDIR = "$PUCSYDIR";
        private const string QTEXTMODE = "$QTEXTMODE";
        private const string REGENMODE = "$REGENMODE";
        private const string SHADEDGE = "$SHADEDGE";
        private const string SHADEDIF = "$SHADEDIF";
        private const string SKETCHINC = "$SKETCHINC";
        private const string SKPOLY = "$SKPOLY";
        private const string SPLFRAME = "$SPLFRAME";
        private const string SPLINESEGS = "$SPLINESEGS";
        private const string SPLINETYPE = "$SPLINETYPE";
        private const string SURFTAB1 = "$SURFTAB1";
        private const string SURFTAB2 = "$SURFTAB2";
        private const string SURFTYPE = "$SURFTYPE";
        private const string SURFU = "$SURFU";
        private const string SURFV = "$SURFV";
        private const string TDCREATE = "$TDCREATE";
        private const string TDINDWG = "$TDINDWG";
        private const string TDUPDATE = "$TDUPDATE";
        private const string TDUSRTIMER = "$TDUSRTIMER";
        private const string TEXTSIZE = "$TEXTSIZE";
        private const string TEXTSTYLE = "$TEXTSTYLE";
        private const string THICKNESS = "$THICKNESS";
        private const string TILEMODE = "$TILEMODE";
        private const string TRACEWID = "$TRACEWID";
        private const string TREEDEPTH = "$TREEDEPTH";
        private const string UCSNAME = "$UCSNAME";
        private const string UCSORG = "$UCSORG";
        private const string UCSXDIR = "$UCSXDIR";
        private const string UCSYDIR = "$UCSYDIR";
        private const string UNITMODE = "$UNITMODE";
        private const string USERI1 = "$USERI1";
        private const string USERI2 = "$USERI2";
        private const string USERI3 = "$USERI3";
        private const string USERI4 = "$USERI4";
        private const string USERI5 = "$USERI5";
        private const string USERR1 = "$USERR1";
        private const string USERR2 = "$USERR2";
        private const string USERR3 = "$USERR3";
        private const string USERR4 = "$USERR4";
        private const string USERR5 = "$USERR5";
        private const string USRTIMER = "$USRTIMER";
        private const string VISRETAIN = "$VISRETAIN";
        private const string WORLDVIEW = "$WORLDVIEW";

        // properties
        public short MaintenenceVersion { get; set; } // ACADMAINTVER
        public DxfAcadVersion Version { get; set; } // ACADVER
        public double AngleZeroDirection { get; set; } // ANGBASE
        public DxfAngleDirection AngleDirection { get; set; } // ANGDIR
        public bool ShowAttributeEntryDialogs { get; set; } // ATTDIA
        public DxfAttributeVisibility AttributeVisibility { get; set; } // ATTMODE
        public bool PromptForAttributeOnInsert { get; set; } // ATTREQ
        public DxfAngleFormat AngleUnitFormat { get; set; } // AUNITS
        public short AngleUnitPrecision { get; set; } // AUPREC
        public bool BlipMode { get; set; } // BLIPMODE
        public DxfColor CurrentEntityColor { get; set; } // CECOLOR
        public double CurrentEntityLinetypeScale { get; set; } // CELTSCALE
        public string CurrentEntityLinetype { get; set; } // CELTYPE
        public double FirstChamferDistance { get; set; } // CHAMFERA
        public double SecondChamferDistance { get; set; } // CHAMFERB
        public double ChamferLength { get; set; } // CHAMFERC
        public double ChamferAngle { get; set; } // CHAMFERD
        public string CurrentLayer { get; set; } // CLAYER
        public DxfJustification CurrentMultilineJustification { get; set; } // CMLJUST
        public double CurrentMultilineScale { get; set; } // CMLSCALE
        public string CurrentMultilineStyle { get; set; } // CMLSTYLE
        public DxfCoordinateDisplay CoordinateDisplay { get; set; } // COORDS
        public bool RetainDeletedObjects { get; set; } // DELOBJ
        public bool UseAlternateDimensioning { get; set; } // DIMALT
        public short AlternateDimensioningDecimalPlaces { get; set; } // DIMALTD
        public double AlternateDimensioningScaleFactor { get; set; } // DIMALTF
        public short AlternateDimensioningToleranceDecimalPlaces { get; set; } // DIMALTTD
        public DxfUnitZeroSuppression AlternateDimensioningToleranceZeroSupression { get; set; } // DIMALTTZ
        public DxfUnitFormat AlternateDimensioningUnits { get; set; } // DIMALTU
        public DxfUnitZeroSuppression AlternateDimensioningZeroSupression { get; set; } // DIMALTZ
        public string AlternateDimensioningSuffix { get; set; } // DIMAPOST
        public bool CreateAssociativeDimensioning { get; set; } // DIMASO
        public double DimensioningArrowSize { get; set; } // DIMASZ
        public DxfAngleFormat DimensioningAngleFormat { get; set; } // DIMAUNIT
        public string ArrowBlockName { get; set; } // DIMBLK
        public string FirstArrowBlockName { get; set; } // DIMBLK1
        public string SecondArrowBlockName { get; set; } // DIMBLK2
        public double CenterMarkSize { get; set; } // DIMCEN
        public DxfColor DimensionLineColor { get; set; } // DIMCLRD
        public DxfColor DimensionExtensionLineColor { get; set; } // DIMCLRE
        public DxfColor DimensionTextColor { get; set; } // DIMCLRT
        public short DimensionUnitToleranceDecimalPlaces { get; set; } // DIMDEC
        public double DimensionLineExtension { get; set; } // DIMDLE
        public double DimensionLineIncrement { get; set; } // DIMDLI
        public double DimensionExtensionLineExtension { get; set; } // DIMEXE
        public double DimensionExtensionLineOffset { get; set; } // DIMEXO
        public DxfDimensionFit DimensionTextAndArrowPlacement { get; set; } // DIMFIT
        public double DimensionLineGap { get; set; } // DIMGAP
        public DxfDimensionTextJustification DimensionTextJustification { get; set; } // DIMJUST
        public double DimensionLinearMeasurementsScaleFactor { get; set; } // DIMLFAC
        public bool GenerateDimensionLimits { get; set; } // DIMLIM
        public string DimensioningSuffix { get; set; } // DIMPOST
        public double DimensionDistanceRoundingValue { get; set; } // DIMRND
        public bool UseSeparateArrowBlocksForDimensions { get; set; } // DIMSAH
        public double DimensioningScaleFactor { get; set; } // DIMSCALE
        public bool SuppressFirstDimensionExtensionLine { get; set; } // DIMSD1
        public bool SuppressSecondDimensionExtensionLine { get; set; } // DIMSD2
        public bool RecomputeDimensionsWhileDragging { get; set; } // DIMSHO
        public bool SuppressOutsideExtensionDimensionLines { get; set; } // DIMSOXD
        public string DimensionStyleName { get; set; } // DIMSTYLE
        public bool TextAboveDimensionLine { get; set; } // DIMTAD
        public short DimensionToleranceDecimalPlaces { get; set; } // DIMTDEC
        public double DimensionToleranceDisplayScaleFactor { get; set; } // DIMTFAC
        public bool DimensionTextInsideHorizontal { get; set; } // DIMTIH
        public bool ForceDimensionTextInsideExtensions { get; set; } // DIMTIX
        public double DimensionMinusTolerance { get; set; } // DIMTM
        public bool ForceDimensionLineExtensionsOutsideIfTextIs { get; set; } // DIMTOFL
        public bool DimensionTextOutsideHorizontal { get; set; } // DIMTOH
        public bool GenerateDimensionTolerances { get; set; } // DIMTOL
        public DxfJustification DimensionToleranceVerticalJustification { get; set; } // DIMTOLJ
        public double DimensionPlusTolerance { get; set; } // DIMTP
        public double DimensioningTickSize { get; set; } // DIMTSZ
        public double DimensionVerticalTextPosition { get; set; } // DIMTVP
        public string DimensionTextStyle { get; set; } // DIMTXSTY
        public double DimensioningTextHeight { get; set; } // DIMTXT
        public DxfUnitZeroSuppression DimensionToleranceZeroSuppression { get; set; } // DIMTZIN
        public DxfUnitFormat DimensionUnitFormat { get; set; } // DIMUNIT
        public bool DimensionCursorControlsTextPosition { get; set; } // DIMUPT
        public DxfUnitZeroSuppression DimensionUnitZeroSuppression { get; set; } // DIMZIN
        public bool DisplaySilhouetteCurvesInWireframeMode { get; set; } // DISPSILH
        public DxfDragMode DragMode { get; set; } // DRAGMODE
        public string DrawingCodePage { get; set; } // DWGCODEPAGE
        public double Elevation { get; set; } // ELEVATION
        public DxfPoint MaximumDrawingExtents { get; set; } // EXTMAX
        public DxfPoint MinimumDrawingExtents { get; set; } // EXTMIN
        public double FilletRadius { get; set; } // FILLETRAD
        public bool FillModeOn { get; set; } // FILLMODE
        public int NextAvailableHandle { get; set; } // HANDLING
        public DxfPoint InsertionBase { get; set; } // INSBASE
        public bool UseLimitsChecking { get; set; } // LIMCHECK
        public DxfPoint MaximumDrawingLimits { get; set; } // LIMMAX
        public DxfPoint MinimumDrawingLimits { get; set; } // LIMMIN
        public double LinetypeScale { get; set; } // LTSCALE
        public DxfUnitFormat UnitFormat { get; set; } // LUNITS
        public short UnitPrecision { get; set; } // LUPREC
        public short MaximumActiveViewports { get; set; } // MAXACTVP
        public DxfDrawingUnits DrawingUnits { get; set; } // MEASUREMENT
        public string FileName { get; set; } // MENU
        public bool MirrorText { get; set; } // MIRRTEXT
        public bool DrawOrthoganalLines { get; set; } // ORTHOMODE
        public int ObjectSnapFlags { get; set; } // OSMODE
        public int PointDisplayMode { get; set; } // PDMODE
        public double PointDisplaySize { get; set; } // PDSIZE
        public double PaperspaceElevation { get; set; } // PELEVATION
        public DxfPoint PaperspaceMaximumDrawingExtents { get; set; } // PEXTMAX
        public DxfPoint PaperspaceMinimumDrawingExtents { get; set; } // PEXTMIN
        public DxfPickStyle PickStyle { get; set; } // PICKSTYLE
        public DxfPoint PaperspaceInsertionBase { get; set; } // PINSBASE
        public bool LimitCheckingInPaperspace { get; set; } // PLIMCHECK
        public DxfPoint PaperspaceMaximumDrawingLimits { get; set; } // PLIMMAX
        public DxfPoint PaperspaceMinimumDrawingLimits { get; set; } // PLIMMIN
        public bool IsPolylineContinuousAroundVerticies { get; set; } // PLINEGEN
        public double DefaultPolylineWidth { get; set; } // PLINEWID
        public bool SaveProxyGraphics { get; set; } // PROXYGRAPHICS
        public bool ScaleLinetypesInPaperspace { get; set; } // PSLTSCALE
        public string PaperspaceUCSName { get; set; } // PUCSNAME
        public DxfPoint PaperspaceUCSOrigin { get; set; } // PUCSORG
        public DxfVector PaperspaceXAxis { get; set; } // PUCSXDIR
        public DxfVector PaperspaceYAxis { get; set; } // PUCSYDIR
        public bool UseQuickTextMode { get; set; } // QTEXTMODE
        public bool UseRegenMode { get; set; } // REGENMODE
        public DxfShadeEdgeMode EdgeShading { get; set; } // SHADEDGE
        public short PercentAmbientToDiffuse { get; set; } // SHADEDIF
        public double SketchRecordIncrement { get; set; } // SKETCHINC
        public DxfPolySketchMode PolylineSketchMode { get; set; } // SKPOLY
        public bool DisplaySplinePolygonControl { get; set; } // SPLFRAME
        public short LineSegmentsPerSplinePatch { get; set; } // SPLINESEGS
        public short PEditSplineCurveType { get; set; } // SPLINETYPE
        public short MeshTabulationsInFirstDirection { get; set; } // SURFTAB1
        public short MeshTabulationsInSecondDirection { get; set; } // SURFTAB2
        public short PEditSmoothSurfaceType { get; set; } // SURFTYPE
        public short PEditSmoothMDensith { get; set; } // SURFU
        public short PEditSmoothNDensith { get; set; } // SURFV
        public DateTime CreationDate { get; set; } // TDCREATE
        public TimeSpan TimeInDrawing { get; set; } // TDINDWG
        public DateTime UpdateDate { get; set; } // TDUPDATE
        public TimeSpan UserElapsedTimer { get; set; } // TDUSRTIMER
        public double DefaultTextHeight { get; set; } // TEXTSIZE
        public string TextStyle { get; set; } // TEXTSTYLE
        public double Thickness { get; set; } // THICKNESS
        public bool PreviousReleaseTileCompatability { get; set; } // TILEMODE
        public double TraceWidth { get; set; } // TRACEWID
        public short SpacialIndexMaxDepth { get; set; } // TREEDEPTH
        public string UCSName { get; set; } // UCSNAME
        public DxfPoint UCSOrigin { get; set; } // UCSORG
        public DxfVector UCSXAxis { get; set; } // UCSXDIR
        public DxfVector UCSYAxis { get; set; } // UCSYDIR
        public bool DisplayFractionsInInput { get; set; } // UNITMODE
        public short UserInt1 { get; set; } // USERI1
        public short UserInt2 { get; set; } // USERI2
        public short UserInt3 { get; set; } // USERI3
        public short UserInt4 { get; set; } // USERI4
        public short UserInt5 { get; set; } // USERI5
        public double UserReal1 { get; set; } // USERR1
        public double UserReal2 { get; set; } // USERR2
        public double UserReal3 { get; set; } // USERR3
        public double UserReal4 { get; set; } // USERR4
        public double UserReal5 { get; set; } // USERR5
        public bool UserTimerOn { get; set; } // USRTIMER
        public bool RetainXRefDependentVisibilitySettings { get; set; } // VISRETAIN
        public bool SetUCSToWCSInDViewOrVPoint { get; set; } // WORLDVIEW

        // set defaults
        private void SetDefaults()
        {
            this.MaintenenceVersion = 0; // ACADMAINTVER
            this.Version = DxfAcadVersion.R14; // ACADVER
            this.AngleZeroDirection = 0.0; // ANGBASE
            this.AngleDirection = DxfAngleDirection.CounterClockwise; // ANGDIR
            this.ShowAttributeEntryDialogs = false; // ATTDIA
            this.AttributeVisibility = DxfAttributeVisibility.None; // ATTMODE
            this.PromptForAttributeOnInsert = true; // ATTREQ
            this.AngleUnitFormat = DxfAngleFormat.DecimalDegrees; // AUNITS
            this.AngleUnitPrecision = 12; // AUPREC
            this.BlipMode = false; // BLIPMODE
            this.CurrentEntityColor = DxfColor.ByBlock; // CECOLOR
            this.CurrentEntityLinetypeScale = 1.0; // CELTSCALE
            this.CurrentEntityLinetype = "BYBLOCK"; // CELTYPE
            this.FirstChamferDistance = 0.0; // CHAMFERA
            this.SecondChamferDistance = 0.0; // CHAMFERB
            this.ChamferLength = 0.0; // CHAMFERC
            this.ChamferAngle = 0.0; // CHAMFERD
            this.CurrentLayer = "0"; // CLAYER
            this.CurrentMultilineJustification = DxfJustification.Top; // CMLJUST
            this.CurrentMultilineScale = 1.0; // CMLSCALE
            this.CurrentMultilineStyle = null; // CMLSTYLE
            this.CoordinateDisplay = DxfCoordinateDisplay.Static; // COORDS
            this.RetainDeletedObjects = false; // DELOBJ
            this.UseAlternateDimensioning = false; // DIMALT
            this.AlternateDimensioningDecimalPlaces = 0; // DIMALTD
            this.AlternateDimensioningScaleFactor = 1.0; // DIMALTF
            this.AlternateDimensioningToleranceDecimalPlaces = 0; // DIMALTTD
            this.AlternateDimensioningToleranceZeroSupression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMALTTZ
            this.AlternateDimensioningUnits = DxfUnitFormat.Scientific; // DIMALTU
            this.AlternateDimensioningZeroSupression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMALTZ
            this.AlternateDimensioningSuffix = null; // DIMAPOST
            this.CreateAssociativeDimensioning = true; // DIMASO
            this.DimensioningArrowSize = 1.0; // DIMASZ
            this.DimensioningAngleFormat = DxfAngleFormat.DecimalDegrees; // DIMAUNIT
            this.ArrowBlockName = null; // DIMBLK
            this.FirstArrowBlockName = null; // DIMBLK1
            this.SecondArrowBlockName = null; // DIMBLK2
            this.CenterMarkSize = 1.0; // DIMCEN
            this.DimensionLineColor = DxfColor.ByBlock; // DIMCLRD
            this.DimensionExtensionLineColor = DxfColor.ByBlock; // DIMCLRE
            this.DimensionTextColor = DxfColor.ByBlock; // DIMCLRT
            this.DimensionUnitToleranceDecimalPlaces = 12; // DIMDEC
            this.DimensionLineExtension = 0.0; // DIMDLE
            this.DimensionLineIncrement = 0.0; // DIMDLI
            this.DimensionExtensionLineExtension = 0.0; // DIMEXE
            this.DimensionExtensionLineOffset = 0.0; // DIMEXO
            this.DimensionTextAndArrowPlacement = DxfDimensionFit.TextAndArrowsOutsideLines; // DIMFIT
            this.DimensionLineGap = 0.0; // DIMGAP
            this.DimensionTextJustification = DxfDimensionTextJustification.AboveLineCenter; // DIMJUST
            this.DimensionLinearMeasurementsScaleFactor = 1.0; // DIMLFAC
            this.GenerateDimensionLimits = false; // DIMLIM
            this.DimensioningSuffix = null; // DIMPOST
            this.DimensionDistanceRoundingValue = 0.001; // DIMRND
            this.UseSeparateArrowBlocksForDimensions = false; // DIMSAH
            this.DimensioningScaleFactor = 1.0; // DIMSCALE
            this.SuppressFirstDimensionExtensionLine = false; // DIMSD1
            this.SuppressSecondDimensionExtensionLine = false; // DIMSD2
            this.RecomputeDimensionsWhileDragging = true; // DIMSHO
            this.SuppressOutsideExtensionDimensionLines = false; // DIMSOXD
            this.DimensionStyleName = null; // DIMSTYLE
            this.TextAboveDimensionLine = false; // DIMTAD
            this.DimensionToleranceDecimalPlaces = 12; // DIMTDEC
            this.DimensionToleranceDisplayScaleFactor = 1.0; // DIMTFAC
            this.DimensionTextInsideHorizontal = false; // DIMTIH
            this.ForceDimensionTextInsideExtensions = false; // DIMTIX
            this.DimensionMinusTolerance = 0.0; // DIMTM
            this.ForceDimensionLineExtensionsOutsideIfTextIs = false; // DIMTOFL
            this.DimensionTextOutsideHorizontal = false; // DIMTOH
            this.GenerateDimensionTolerances = false; // DIMTOL
            this.DimensionToleranceVerticalJustification = DxfJustification.Top; // DIMTOLJ
            this.DimensionPlusTolerance = 0.0; // DIMTP
            this.DimensioningTickSize = 0.0; // DIMTSZ
            this.DimensionVerticalTextPosition = 0.0; // DIMTVP
            this.DimensionTextStyle = null; // DIMTXSTY
            this.DimensioningTextHeight = 10.0; // DIMTXT
            this.DimensionToleranceZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMTZIN
            this.DimensionUnitFormat = DxfUnitFormat.Scientific; // DIMUNIT
            this.DimensionCursorControlsTextPosition = true; // DIMUPT
            this.DimensionUnitZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMZIN
            this.DisplaySilhouetteCurvesInWireframeMode = false; // DISPSILH
            this.DragMode = DxfDragMode.Auto; // DRAGMODE
            this.DrawingCodePage = "437"; // DWGCODEPAGE
            this.Elevation = 0.0; // ELEVATION
            this.MaximumDrawingExtents = DxfPoint.Origin; // EXTMAX
            this.MinimumDrawingExtents = DxfPoint.Origin; // EXTMIN
            this.FilletRadius = 0.0; // FILLETRAD
            this.FillModeOn = true; // FILLMODE
            this.NextAvailableHandle = 0; // HANDLING
            this.InsertionBase = DxfPoint.Origin; // INSBASE
            this.UseLimitsChecking = false; // LIMCHECK
            this.MaximumDrawingLimits = DxfPoint.Origin; // LIMMAX
            this.MinimumDrawingLimits = DxfPoint.Origin; // LIMMIN
            this.LinetypeScale = 1.0; // LTSCALE
            this.UnitFormat = DxfUnitFormat.Scientific; // LUNITS
            this.UnitPrecision = 12; // LUPREC
            this.MaximumActiveViewports = 3; // MAXACTVP
            this.DrawingUnits = DxfDrawingUnits.English; // MEASUREMENT
            this.FileName = null; // MENU
            this.MirrorText = false; // MIRRTEXT
            this.DrawOrthoganalLines = false; // ORTHOMODE
            this.ObjectSnapFlags = 4133; // OSMODE
            this.PointDisplayMode = 0; // PDMODE
            this.PointDisplaySize = 0.0; // PDSIZE
            this.PaperspaceElevation = 0.0; // PELEVATION
            this.PaperspaceMaximumDrawingExtents = DxfPoint.Origin; // PEXTMAX
            this.PaperspaceMinimumDrawingExtents = DxfPoint.Origin; // PEXTMIN
            this.PickStyle = DxfPickStyle.None; // PICKSTYLE
            this.PaperspaceInsertionBase = DxfPoint.Origin; // PINSBASE
            this.LimitCheckingInPaperspace = false; // PLIMCHECK
            this.PaperspaceMaximumDrawingLimits = DxfPoint.Origin; // PLIMMAX
            this.PaperspaceMinimumDrawingLimits = DxfPoint.Origin; // PLIMMIN
            this.IsPolylineContinuousAroundVerticies = true; // PLINEGEN
            this.DefaultPolylineWidth = 0.0; // PLINEWID
            this.SaveProxyGraphics = true; // PROXYGRAPHICS
            this.ScaleLinetypesInPaperspace = true; // PSLTSCALE
            this.PaperspaceUCSName = null; // PUCSNAME
            this.PaperspaceUCSOrigin = DxfPoint.Origin; // PUCSORG
            this.PaperspaceXAxis = DxfVector.XAxis; // PUCSXDIR
            this.PaperspaceYAxis = DxfVector.YAxis; // PUCSYDIR
            this.UseQuickTextMode = true; // QTEXTMODE
            this.UseRegenMode = true; // REGENMODE
            this.EdgeShading = DxfShadeEdgeMode.FacesShadedEdgeNotHighlighted; // SHADEDGE
            this.PercentAmbientToDiffuse = 70; // SHADEDIF
            this.SketchRecordIncrement = 0.0; // SKETCHINC
            this.PolylineSketchMode = DxfPolySketchMode.SketchLines; // SKPOLY
            this.DisplaySplinePolygonControl = true; // SPLFRAME
            this.LineSegmentsPerSplinePatch = 0; // SPLINESEGS
            this.PEditSplineCurveType = 0; // SPLINETYPE
            this.MeshTabulationsInFirstDirection = 0; // SURFTAB1
            this.MeshTabulationsInSecondDirection = 0; // SURFTAB2
            this.PEditSmoothSurfaceType = 0; // SURFTYPE
            this.PEditSmoothMDensith = 0; // SURFU
            this.PEditSmoothNDensith = 0; // SURFV
            this.CreationDate = DateTime.Now; // TDCREATE
            this.TimeInDrawing = TimeSpan.Zero; // TDINDWG
            this.UpdateDate = DateTime.Now; // TDUPDATE
            this.UserElapsedTimer = TimeSpan.Zero; // TDUSRTIMER
            this.DefaultTextHeight = 0.0; // TEXTSIZE
            this.TextStyle = null; // TEXTSTYLE
            this.Thickness = 0.0; // THICKNESS
            this.PreviousReleaseTileCompatability = false; // TILEMODE
            this.TraceWidth = 0.0; // TRACEWID
            this.SpacialIndexMaxDepth = 0; // TREEDEPTH
            this.UCSName = null; // UCSNAME
            this.UCSOrigin = DxfPoint.Origin; // UCSORG
            this.UCSXAxis = DxfVector.XAxis; // UCSXDIR
            this.UCSYAxis = DxfVector.YAxis; // UCSYDIR
            this.DisplayFractionsInInput = true; // UNITMODE
            this.UserInt1 = 0; // USERI1
            this.UserInt2 = 0; // USERI2
            this.UserInt3 = 0; // USERI3
            this.UserInt4 = 0; // USERI4
            this.UserInt5 = 0; // USERI5
            this.UserReal1 = 0.0; // USERR1
            this.UserReal2 = 0.0; // USERR2
            this.UserReal3 = 0.0; // USERR3
            this.UserReal4 = 0.0; // USERR4
            this.UserReal5 = 0.0; // USERR5
            this.UserTimerOn = false; // USRTIMER
            this.RetainXRefDependentVisibilitySettings = false; // VISRETAIN
            this.SetUCSToWCSInDViewOrVPoint = true; // WORLDVIEW
        }

        // build list of code value pairs
        internal static void AddValueToList(List<DxfCodePair> list, DxfHeader header, DxfAcadVersion version)
        {
            // ACADMAINTVER
            if (IsPropertySupported(ACADMAINTVER, version))
            {
                list.Add(new DxfCodePair(9, ACADMAINTVER));
			    list.Add(new DxfCodePair(70, (header.MaintenenceVersion)));
            }

            // ACADVER
            if (IsPropertySupported(ACADVER, version))
            {
                list.Add(new DxfCodePair(9, ACADVER));
			    list.Add(new DxfCodePair(1, DxfAcadVersionStrings.VersionToString(header.Version)));
            }

            // ANGBASE
            if (IsPropertySupported(ANGBASE, version))
            {
                list.Add(new DxfCodePair(9, ANGBASE));
			    list.Add(new DxfCodePair(50, (header.AngleZeroDirection)));
            }

            // ANGDIR
            if (IsPropertySupported(ANGDIR, version))
            {
                list.Add(new DxfCodePair(9, ANGDIR));
			    list.Add(new DxfCodePair(70, (short)(header.AngleDirection)));
            }

            // ATTDIA
            if (IsPropertySupported(ATTDIA, version))
            {
                list.Add(new DxfCodePair(9, ATTDIA));
			    list.Add(new DxfCodePair(70, BoolShort(header.ShowAttributeEntryDialogs)));
            }

            // ATTMODE
            if (IsPropertySupported(ATTMODE, version))
            {
                list.Add(new DxfCodePair(9, ATTMODE));
			    list.Add(new DxfCodePair(70, (short)(header.AttributeVisibility)));
            }

            // ATTREQ
            if (IsPropertySupported(ATTREQ, version))
            {
                list.Add(new DxfCodePair(9, ATTREQ));
			    list.Add(new DxfCodePair(70, BoolShort(header.PromptForAttributeOnInsert)));
            }

            // AUNITS
            if (IsPropertySupported(AUNITS, version))
            {
                list.Add(new DxfCodePair(9, AUNITS));
			    list.Add(new DxfCodePair(70, (short)(header.AngleUnitFormat)));
            }

            // AUPREC
            if (IsPropertySupported(AUPREC, version))
            {
                list.Add(new DxfCodePair(9, AUPREC));
			    list.Add(new DxfCodePair(70, (header.AngleUnitPrecision)));
            }

            // BLIPMODE
            if (IsPropertySupported(BLIPMODE, version))
            {
                list.Add(new DxfCodePair(9, BLIPMODE));
			    list.Add(new DxfCodePair(70, BoolShort(header.BlipMode)));
            }

            // CECOLOR
            if (IsPropertySupported(CECOLOR, version))
            {
                list.Add(new DxfCodePair(9, CECOLOR));
			    list.Add(new DxfCodePair(62, RawValue(header.CurrentEntityColor)));
            }

            // CELTSCALE
            if (IsPropertySupported(CELTSCALE, version))
            {
                list.Add(new DxfCodePair(9, CELTSCALE));
			    list.Add(new DxfCodePair(40, (header.CurrentEntityLinetypeScale)));
            }

            // CELTYPE
            if (IsPropertySupported(CELTYPE, version))
            {
                list.Add(new DxfCodePair(9, CELTYPE));
			    list.Add(new DxfCodePair(6, (header.CurrentEntityLinetype)));
            }

            // CHAMFERA
            if (IsPropertySupported(CHAMFERA, version))
            {
                list.Add(new DxfCodePair(9, CHAMFERA));
			    list.Add(new DxfCodePair(40, (header.FirstChamferDistance)));
            }

            // CHAMFERB
            if (IsPropertySupported(CHAMFERB, version))
            {
                list.Add(new DxfCodePair(9, CHAMFERB));
			    list.Add(new DxfCodePair(40, (header.SecondChamferDistance)));
            }

            // CHAMFERC
            if (IsPropertySupported(CHAMFERC, version))
            {
                list.Add(new DxfCodePair(9, CHAMFERC));
			    list.Add(new DxfCodePair(40, (header.ChamferLength)));
            }

            // CHAMFERD
            if (IsPropertySupported(CHAMFERD, version))
            {
                list.Add(new DxfCodePair(9, CHAMFERD));
			    list.Add(new DxfCodePair(40, (header.ChamferAngle)));
            }

            // CLAYER
            if (IsPropertySupported(CLAYER, version))
            {
                list.Add(new DxfCodePair(9, CLAYER));
			    list.Add(new DxfCodePair(8, (header.CurrentLayer)));
            }

            // CMLJUST
            if (IsPropertySupported(CMLJUST, version))
            {
                list.Add(new DxfCodePair(9, CMLJUST));
			    list.Add(new DxfCodePair(70, (short)(header.CurrentMultilineJustification)));
            }

            // CMLSCALE
            if (IsPropertySupported(CMLSCALE, version))
            {
                list.Add(new DxfCodePair(9, CMLSCALE));
			    list.Add(new DxfCodePair(40, (header.CurrentMultilineScale)));
            }

            // CMLSTYLE
            if (IsPropertySupported(CMLSTYLE, version))
            {
                list.Add(new DxfCodePair(9, CMLSTYLE));
			    list.Add(new DxfCodePair(2, (header.CurrentMultilineStyle)));
            }

            // COORDS
            if (IsPropertySupported(COORDS, version))
            {
                list.Add(new DxfCodePair(9, COORDS));
			    list.Add(new DxfCodePair(70, (short)(header.CoordinateDisplay)));
            }

            // DELOBJ
            if (IsPropertySupported(DELOBJ, version))
            {
                list.Add(new DxfCodePair(9, DELOBJ));
			    list.Add(new DxfCodePair(70, BoolShort(header.RetainDeletedObjects)));
            }

            // DIMALT
            if (IsPropertySupported(DIMALT, version))
            {
                list.Add(new DxfCodePair(9, DIMALT));
			    list.Add(new DxfCodePair(70, BoolShort(header.UseAlternateDimensioning)));
            }

            // DIMALTD
            if (IsPropertySupported(DIMALTD, version))
            {
                list.Add(new DxfCodePair(9, DIMALTD));
			    list.Add(new DxfCodePair(70, (header.AlternateDimensioningDecimalPlaces)));
            }

            // DIMALTF
            if (IsPropertySupported(DIMALTF, version))
            {
                list.Add(new DxfCodePair(9, DIMALTF));
			    list.Add(new DxfCodePair(40, (header.AlternateDimensioningScaleFactor)));
            }

            // DIMALTTD
            if (IsPropertySupported(DIMALTTD, version))
            {
                list.Add(new DxfCodePair(9, DIMALTTD));
			    list.Add(new DxfCodePair(70, (header.AlternateDimensioningToleranceDecimalPlaces)));
            }

            // DIMALTTZ
            if (IsPropertySupported(DIMALTTZ, version))
            {
                list.Add(new DxfCodePair(9, DIMALTTZ));
			    list.Add(new DxfCodePair(70, (short)(header.AlternateDimensioningToleranceZeroSupression)));
            }

            // DIMALTU
            if (IsPropertySupported(DIMALTU, version))
            {
                list.Add(new DxfCodePair(9, DIMALTU));
			    list.Add(new DxfCodePair(70, (short)(header.AlternateDimensioningUnits)));
            }

            // DIMALTZ
            if (IsPropertySupported(DIMALTZ, version))
            {
                list.Add(new DxfCodePair(9, DIMALTZ));
			    list.Add(new DxfCodePair(70, (short)(header.AlternateDimensioningZeroSupression)));
            }

            // DIMAPOST
            if (IsPropertySupported(DIMAPOST, version))
            {
                list.Add(new DxfCodePair(9, DIMAPOST));
			    list.Add(new DxfCodePair(1, (header.AlternateDimensioningSuffix)));
            }

            // DIMASO
            if (IsPropertySupported(DIMASO, version))
            {
                list.Add(new DxfCodePair(9, DIMASO));
			    list.Add(new DxfCodePair(70, BoolShort(header.CreateAssociativeDimensioning)));
            }

            // DIMASZ
            if (IsPropertySupported(DIMASZ, version))
            {
                list.Add(new DxfCodePair(9, DIMASZ));
			    list.Add(new DxfCodePair(40, (header.DimensioningArrowSize)));
            }

            // DIMAUNIT
            if (IsPropertySupported(DIMAUNIT, version))
            {
                list.Add(new DxfCodePair(9, DIMAUNIT));
			    list.Add(new DxfCodePair(70, (short)(header.DimensioningAngleFormat)));
            }

            // DIMBLK
            if (IsPropertySupported(DIMBLK, version))
            {
                list.Add(new DxfCodePair(9, DIMBLK));
			    list.Add(new DxfCodePair(1, (header.ArrowBlockName)));
            }

            // DIMBLK1
            if (IsPropertySupported(DIMBLK1, version))
            {
                list.Add(new DxfCodePair(9, DIMBLK1));
			    list.Add(new DxfCodePair(1, (header.FirstArrowBlockName)));
            }

            // DIMBLK2
            if (IsPropertySupported(DIMBLK2, version))
            {
                list.Add(new DxfCodePair(9, DIMBLK2));
			    list.Add(new DxfCodePair(1, (header.SecondArrowBlockName)));
            }

            // DIMCEN
            if (IsPropertySupported(DIMCEN, version))
            {
                list.Add(new DxfCodePair(9, DIMCEN));
			    list.Add(new DxfCodePair(40, (header.CenterMarkSize)));
            }

            // DIMCLRD
            if (IsPropertySupported(DIMCLRD, version))
            {
                list.Add(new DxfCodePair(9, DIMCLRD));
			    list.Add(new DxfCodePair(70, RawValue(header.DimensionLineColor)));
            }

            // DIMCLRE
            if (IsPropertySupported(DIMCLRE, version))
            {
                list.Add(new DxfCodePair(9, DIMCLRE));
			    list.Add(new DxfCodePair(70, RawValue(header.DimensionExtensionLineColor)));
            }

            // DIMCLRT
            if (IsPropertySupported(DIMCLRT, version))
            {
                list.Add(new DxfCodePair(9, DIMCLRT));
			    list.Add(new DxfCodePair(70, RawValue(header.DimensionTextColor)));
            }

            // DIMDEC
            if (IsPropertySupported(DIMDEC, version))
            {
                list.Add(new DxfCodePair(9, DIMDEC));
			    list.Add(new DxfCodePair(70, (header.DimensionUnitToleranceDecimalPlaces)));
            }

            // DIMDLE
            if (IsPropertySupported(DIMDLE, version))
            {
                list.Add(new DxfCodePair(9, DIMDLE));
			    list.Add(new DxfCodePair(40, (header.DimensionLineExtension)));
            }

            // DIMDLI
            if (IsPropertySupported(DIMDLI, version))
            {
                list.Add(new DxfCodePair(9, DIMDLI));
			    list.Add(new DxfCodePair(40, (header.DimensionLineIncrement)));
            }

            // DIMEXE
            if (IsPropertySupported(DIMEXE, version))
            {
                list.Add(new DxfCodePair(9, DIMEXE));
			    list.Add(new DxfCodePair(40, (header.DimensionExtensionLineExtension)));
            }

            // DIMEXO
            if (IsPropertySupported(DIMEXO, version))
            {
                list.Add(new DxfCodePair(9, DIMEXO));
			    list.Add(new DxfCodePair(40, (header.DimensionExtensionLineOffset)));
            }

            // DIMFIT
            if (IsPropertySupported(DIMFIT, version))
            {
                list.Add(new DxfCodePair(9, DIMFIT));
			    list.Add(new DxfCodePair(70, (short)(header.DimensionTextAndArrowPlacement)));
            }

            // DIMGAP
            if (IsPropertySupported(DIMGAP, version))
            {
                list.Add(new DxfCodePair(9, DIMGAP));
			    list.Add(new DxfCodePair(40, (header.DimensionLineGap)));
            }

            // DIMJUST
            if (IsPropertySupported(DIMJUST, version))
            {
                list.Add(new DxfCodePair(9, DIMJUST));
			    list.Add(new DxfCodePair(70, (short)(header.DimensionTextJustification)));
            }

            // DIMLFAC
            if (IsPropertySupported(DIMLFAC, version))
            {
                list.Add(new DxfCodePair(9, DIMLFAC));
			    list.Add(new DxfCodePair(40, (header.DimensionLinearMeasurementsScaleFactor)));
            }

            // DIMLIM
            if (IsPropertySupported(DIMLIM, version))
            {
                list.Add(new DxfCodePair(9, DIMLIM));
			    list.Add(new DxfCodePair(70, BoolShort(header.GenerateDimensionLimits)));
            }

            // DIMPOST
            if (IsPropertySupported(DIMPOST, version))
            {
                list.Add(new DxfCodePair(9, DIMPOST));
			    list.Add(new DxfCodePair(1, (header.DimensioningSuffix)));
            }

            // DIMRND
            if (IsPropertySupported(DIMRND, version))
            {
                list.Add(new DxfCodePair(9, DIMRND));
			    list.Add(new DxfCodePair(40, (header.DimensionDistanceRoundingValue)));
            }

            // DIMSAH
            if (IsPropertySupported(DIMSAH, version))
            {
                list.Add(new DxfCodePair(9, DIMSAH));
			    list.Add(new DxfCodePair(70, BoolShort(header.UseSeparateArrowBlocksForDimensions)));
            }

            // DIMSCALE
            if (IsPropertySupported(DIMSCALE, version))
            {
                list.Add(new DxfCodePair(9, DIMSCALE));
			    list.Add(new DxfCodePair(40, (header.DimensioningScaleFactor)));
            }

            // DIMSD1
            if (IsPropertySupported(DIMSD1, version))
            {
                list.Add(new DxfCodePair(9, DIMSD1));
			    list.Add(new DxfCodePair(70, BoolShort(header.SuppressFirstDimensionExtensionLine)));
            }

            // DIMSD2
            if (IsPropertySupported(DIMSD2, version))
            {
                list.Add(new DxfCodePair(9, DIMSD2));
			    list.Add(new DxfCodePair(70, BoolShort(header.SuppressSecondDimensionExtensionLine)));
            }

            // DIMSHO
            if (IsPropertySupported(DIMSHO, version))
            {
                list.Add(new DxfCodePair(9, DIMSHO));
			    list.Add(new DxfCodePair(70, BoolShort(header.RecomputeDimensionsWhileDragging)));
            }

            // DIMSOXD
            if (IsPropertySupported(DIMSOXD, version))
            {
                list.Add(new DxfCodePair(9, DIMSOXD));
			    list.Add(new DxfCodePair(70, BoolShort(header.SuppressOutsideExtensionDimensionLines)));
            }

            // DIMSTYLE
            if (IsPropertySupported(DIMSTYLE, version))
            {
                list.Add(new DxfCodePair(9, DIMSTYLE));
			    list.Add(new DxfCodePair(2, (header.DimensionStyleName)));
            }

            // DIMTAD
            if (IsPropertySupported(DIMTAD, version))
            {
                list.Add(new DxfCodePair(9, DIMTAD));
			    list.Add(new DxfCodePair(70, BoolShort(header.TextAboveDimensionLine)));
            }

            // DIMTDEC
            if (IsPropertySupported(DIMTDEC, version))
            {
                list.Add(new DxfCodePair(9, DIMTDEC));
			    list.Add(new DxfCodePair(70, (header.DimensionToleranceDecimalPlaces)));
            }

            // DIMTFAC
            if (IsPropertySupported(DIMTFAC, version))
            {
                list.Add(new DxfCodePair(9, DIMTFAC));
			    list.Add(new DxfCodePair(40, (header.DimensionToleranceDisplayScaleFactor)));
            }

            // DIMTIH
            if (IsPropertySupported(DIMTIH, version))
            {
                list.Add(new DxfCodePair(9, DIMTIH));
			    list.Add(new DxfCodePair(70, BoolShort(header.DimensionTextInsideHorizontal)));
            }

            // DIMTIX
            if (IsPropertySupported(DIMTIX, version))
            {
                list.Add(new DxfCodePair(9, DIMTIX));
			    list.Add(new DxfCodePair(70, BoolShort(header.ForceDimensionTextInsideExtensions)));
            }

            // DIMTM
            if (IsPropertySupported(DIMTM, version))
            {
                list.Add(new DxfCodePair(9, DIMTM));
			    list.Add(new DxfCodePair(40, (header.DimensionMinusTolerance)));
            }

            // DIMTOFL
            if (IsPropertySupported(DIMTOFL, version))
            {
                list.Add(new DxfCodePair(9, DIMTOFL));
			    list.Add(new DxfCodePair(70, BoolShort(header.ForceDimensionLineExtensionsOutsideIfTextIs)));
            }

            // DIMTOH
            if (IsPropertySupported(DIMTOH, version))
            {
                list.Add(new DxfCodePair(9, DIMTOH));
			    list.Add(new DxfCodePair(70, BoolShort(header.DimensionTextOutsideHorizontal)));
            }

            // DIMTOL
            if (IsPropertySupported(DIMTOL, version))
            {
                list.Add(new DxfCodePair(9, DIMTOL));
			    list.Add(new DxfCodePair(70, BoolShort(header.GenerateDimensionTolerances)));
            }

            // DIMTOLJ
            if (IsPropertySupported(DIMTOLJ, version))
            {
                list.Add(new DxfCodePair(9, DIMTOLJ));
			    list.Add(new DxfCodePair(70, (short)(header.DimensionToleranceVerticalJustification)));
            }

            // DIMTP
            if (IsPropertySupported(DIMTP, version))
            {
                list.Add(new DxfCodePair(9, DIMTP));
			    list.Add(new DxfCodePair(40, (header.DimensionPlusTolerance)));
            }

            // DIMTSZ
            if (IsPropertySupported(DIMTSZ, version))
            {
                list.Add(new DxfCodePair(9, DIMTSZ));
			    list.Add(new DxfCodePair(40, (header.DimensioningTickSize)));
            }

            // DIMTVP
            if (IsPropertySupported(DIMTVP, version))
            {
                list.Add(new DxfCodePair(9, DIMTVP));
			    list.Add(new DxfCodePair(40, (header.DimensionVerticalTextPosition)));
            }

            // DIMTXSTY
            if (IsPropertySupported(DIMTXSTY, version))
            {
                list.Add(new DxfCodePair(9, DIMTXSTY));
			    list.Add(new DxfCodePair(7, (header.DimensionTextStyle)));
            }

            // DIMTXT
            if (IsPropertySupported(DIMTXT, version))
            {
                list.Add(new DxfCodePair(9, DIMTXT));
			    list.Add(new DxfCodePair(40, (header.DimensioningTextHeight)));
            }

            // DIMTZIN
            if (IsPropertySupported(DIMTZIN, version))
            {
                list.Add(new DxfCodePair(9, DIMTZIN));
			    list.Add(new DxfCodePair(70, (short)(header.DimensionToleranceZeroSuppression)));
            }

            // DIMUNIT
            if (IsPropertySupported(DIMUNIT, version))
            {
                list.Add(new DxfCodePair(9, DIMUNIT));
			    list.Add(new DxfCodePair(70, (short)(header.DimensionUnitFormat)));
            }

            // DIMUPT
            if (IsPropertySupported(DIMUPT, version))
            {
                list.Add(new DxfCodePair(9, DIMUPT));
			    list.Add(new DxfCodePair(70, BoolShort(header.DimensionCursorControlsTextPosition)));
            }

            // DIMZIN
            if (IsPropertySupported(DIMZIN, version))
            {
                list.Add(new DxfCodePair(9, DIMZIN));
			    list.Add(new DxfCodePair(70, (short)(header.DimensionUnitZeroSuppression)));
            }

            // DISPSILH
            if (IsPropertySupported(DISPSILH, version))
            {
                list.Add(new DxfCodePair(9, DISPSILH));
			    list.Add(new DxfCodePair(70, BoolShort(header.DisplaySilhouetteCurvesInWireframeMode)));
            }

            // DRAGMODE
            if (IsPropertySupported(DRAGMODE, version))
            {
                list.Add(new DxfCodePair(9, DRAGMODE));
			    list.Add(new DxfCodePair(70, (short)(header.DragMode)));
            }

            // DWGCODEPAGE
            if (IsPropertySupported(DWGCODEPAGE, version))
            {
                list.Add(new DxfCodePair(9, DWGCODEPAGE));
			    list.Add(new DxfCodePair(3, (header.DrawingCodePage)));
            }

            // ELEVATION
            if (IsPropertySupported(ELEVATION, version))
            {
                list.Add(new DxfCodePair(9, ELEVATION));
			    list.Add(new DxfCodePair(40, (header.Elevation)));
            }

            // EXTMAX
            if (IsPropertySupported(EXTMAX, version))
            {
                list.Add(new DxfCodePair(9, EXTMAX));
                list.Add(new DxfCodePair(10, header.MaximumDrawingExtents.X));
                list.Add(new DxfCodePair(20, header.MaximumDrawingExtents.Y));
                list.Add(new DxfCodePair(30, header.MaximumDrawingExtents.Z));

            }

            // EXTMIN
            if (IsPropertySupported(EXTMIN, version))
            {
                list.Add(new DxfCodePair(9, EXTMIN));
                list.Add(new DxfCodePair(10, header.MinimumDrawingExtents.X));
                list.Add(new DxfCodePair(20, header.MinimumDrawingExtents.Y));
                list.Add(new DxfCodePair(30, header.MinimumDrawingExtents.Z));

            }

            // FILLETRAD
            if (IsPropertySupported(FILLETRAD, version))
            {
                list.Add(new DxfCodePair(9, FILLETRAD));
			    list.Add(new DxfCodePair(40, (header.FilletRadius)));
            }

            // FILLMODE
            if (IsPropertySupported(FILLMODE, version))
            {
                list.Add(new DxfCodePair(9, FILLMODE));
			    list.Add(new DxfCodePair(70, BoolShort(header.FillModeOn)));
            }

            // HANDLING
            if (IsPropertySupported(HANDLING, version))
            {
                list.Add(new DxfCodePair(9, HANDLING));
			    list.Add(new DxfCodePair(70, (short)(header.NextAvailableHandle)));
            }

            // INSBASE
            if (IsPropertySupported(INSBASE, version))
            {
                list.Add(new DxfCodePair(9, INSBASE));
                list.Add(new DxfCodePair(10, header.InsertionBase.X));
                list.Add(new DxfCodePair(20, header.InsertionBase.Y));
                list.Add(new DxfCodePair(30, header.InsertionBase.Z));

            }

            // LIMCHECK
            if (IsPropertySupported(LIMCHECK, version))
            {
                list.Add(new DxfCodePair(9, LIMCHECK));
			    list.Add(new DxfCodePair(70, BoolShort(header.UseLimitsChecking)));
            }

            // LIMMAX
            if (IsPropertySupported(LIMMAX, version))
            {
                list.Add(new DxfCodePair(9, LIMMAX));
                list.Add(new DxfCodePair(10, header.MaximumDrawingLimits.X));
                list.Add(new DxfCodePair(20, header.MaximumDrawingLimits.Y));

            }

            // LIMMIN
            if (IsPropertySupported(LIMMIN, version))
            {
                list.Add(new DxfCodePair(9, LIMMIN));
                list.Add(new DxfCodePair(10, header.MinimumDrawingLimits.X));
                list.Add(new DxfCodePair(20, header.MinimumDrawingLimits.Y));

            }

            // LTSCALE
            if (IsPropertySupported(LTSCALE, version))
            {
                list.Add(new DxfCodePair(9, LTSCALE));
			    list.Add(new DxfCodePair(40, (header.LinetypeScale)));
            }

            // LUNITS
            if (IsPropertySupported(LUNITS, version))
            {
                list.Add(new DxfCodePair(9, LUNITS));
			    list.Add(new DxfCodePair(70, (short)(header.UnitFormat)));
            }

            // LUPREC
            if (IsPropertySupported(LUPREC, version))
            {
                list.Add(new DxfCodePair(9, LUPREC));
			    list.Add(new DxfCodePair(70, (header.UnitPrecision)));
            }

            // MAXACTVP
            if (IsPropertySupported(MAXACTVP, version))
            {
                list.Add(new DxfCodePair(9, MAXACTVP));
			    list.Add(new DxfCodePair(70, (header.MaximumActiveViewports)));
            }

            // MEASUREMENT
            if (IsPropertySupported(MEASUREMENT, version))
            {
                list.Add(new DxfCodePair(9, MEASUREMENT));
			    list.Add(new DxfCodePair(70, (short)(header.DrawingUnits)));
            }

            // MENU
            if (IsPropertySupported(MENU, version))
            {
                list.Add(new DxfCodePair(9, MENU));
			    list.Add(new DxfCodePair(1, (header.FileName)));
            }

            // MIRRTEXT
            if (IsPropertySupported(MIRRTEXT, version))
            {
                list.Add(new DxfCodePair(9, MIRRTEXT));
			    list.Add(new DxfCodePair(70, BoolShort(header.MirrorText)));
            }

            // ORTHOMODE
            if (IsPropertySupported(ORTHOMODE, version))
            {
                list.Add(new DxfCodePair(9, ORTHOMODE));
			    list.Add(new DxfCodePair(70, BoolShort(header.DrawOrthoganalLines)));
            }

            // OSMODE
            if (IsPropertySupported(OSMODE, version))
            {
                list.Add(new DxfCodePair(9, OSMODE));
			    list.Add(new DxfCodePair(70, (short)(header.ObjectSnapFlags)));
            }

            // PDMODE
            if (IsPropertySupported(PDMODE, version))
            {
                list.Add(new DxfCodePair(9, PDMODE));
			    list.Add(new DxfCodePair(70, (short)(header.PointDisplayMode)));
            }

            // PDSIZE
            if (IsPropertySupported(PDSIZE, version))
            {
                list.Add(new DxfCodePair(9, PDSIZE));
			    list.Add(new DxfCodePair(40, (header.PointDisplaySize)));
            }

            // PELEVATION
            if (IsPropertySupported(PELEVATION, version))
            {
                list.Add(new DxfCodePair(9, PELEVATION));
			    list.Add(new DxfCodePair(40, (header.PaperspaceElevation)));
            }

            // PEXTMAX
            if (IsPropertySupported(PEXTMAX, version))
            {
                list.Add(new DxfCodePair(9, PEXTMAX));
                list.Add(new DxfCodePair(10, header.PaperspaceMaximumDrawingExtents.X));
                list.Add(new DxfCodePair(20, header.PaperspaceMaximumDrawingExtents.Y));
                list.Add(new DxfCodePair(30, header.PaperspaceMaximumDrawingExtents.Z));

            }

            // PEXTMIN
            if (IsPropertySupported(PEXTMIN, version))
            {
                list.Add(new DxfCodePair(9, PEXTMIN));
                list.Add(new DxfCodePair(10, header.PaperspaceMinimumDrawingExtents.X));
                list.Add(new DxfCodePair(20, header.PaperspaceMinimumDrawingExtents.Y));
                list.Add(new DxfCodePair(30, header.PaperspaceMinimumDrawingExtents.Z));

            }

            // PICKSTYLE
            if (IsPropertySupported(PICKSTYLE, version))
            {
                list.Add(new DxfCodePair(9, PICKSTYLE));
			    list.Add(new DxfCodePair(70, (short)(header.PickStyle)));
            }

            // PINSBASE
            if (IsPropertySupported(PINSBASE, version))
            {
                list.Add(new DxfCodePair(9, PINSBASE));
                list.Add(new DxfCodePair(10, header.PaperspaceInsertionBase.X));
                list.Add(new DxfCodePair(20, header.PaperspaceInsertionBase.Y));
                list.Add(new DxfCodePair(30, header.PaperspaceInsertionBase.Z));

            }

            // PLIMCHECK
            if (IsPropertySupported(PLIMCHECK, version))
            {
                list.Add(new DxfCodePair(9, PLIMCHECK));
			    list.Add(new DxfCodePair(70, BoolShort(header.LimitCheckingInPaperspace)));
            }

            // PLIMMAX
            if (IsPropertySupported(PLIMMAX, version))
            {
                list.Add(new DxfCodePair(9, PLIMMAX));
                list.Add(new DxfCodePair(10, header.PaperspaceMaximumDrawingLimits.X));
                list.Add(new DxfCodePair(20, header.PaperspaceMaximumDrawingLimits.Y));

            }

            // PLIMMIN
            if (IsPropertySupported(PLIMMIN, version))
            {
                list.Add(new DxfCodePair(9, PLIMMIN));
                list.Add(new DxfCodePair(10, header.PaperspaceMinimumDrawingLimits.X));
                list.Add(new DxfCodePair(20, header.PaperspaceMinimumDrawingLimits.Y));

            }

            // PLINEGEN
            if (IsPropertySupported(PLINEGEN, version))
            {
                list.Add(new DxfCodePair(9, PLINEGEN));
			    list.Add(new DxfCodePair(70, BoolShort(header.IsPolylineContinuousAroundVerticies)));
            }

            // PLINEWID
            if (IsPropertySupported(PLINEWID, version))
            {
                list.Add(new DxfCodePair(9, PLINEWID));
			    list.Add(new DxfCodePair(40, (header.DefaultPolylineWidth)));
            }

            // PROXYGRAPHICS
            if (IsPropertySupported(PROXYGRAPHICS, version))
            {
                list.Add(new DxfCodePair(9, PROXYGRAPHICS));
			    list.Add(new DxfCodePair(70, BoolShort(header.SaveProxyGraphics)));
            }

            // PSLTSCALE
            if (IsPropertySupported(PSLTSCALE, version))
            {
                list.Add(new DxfCodePair(9, PSLTSCALE));
			    list.Add(new DxfCodePair(70, BoolShort(header.ScaleLinetypesInPaperspace)));
            }

            // PUCSNAME
            if (IsPropertySupported(PUCSNAME, version))
            {
                list.Add(new DxfCodePair(9, PUCSNAME));
			    list.Add(new DxfCodePair(2, (header.PaperspaceUCSName)));
            }

            // PUCSORG
            if (IsPropertySupported(PUCSORG, version))
            {
                list.Add(new DxfCodePair(9, PUCSORG));
                list.Add(new DxfCodePair(10, header.PaperspaceUCSOrigin.X));
                list.Add(new DxfCodePair(20, header.PaperspaceUCSOrigin.Y));
                list.Add(new DxfCodePair(30, header.PaperspaceUCSOrigin.Z));

            }

            // PUCSXDIR
            if (IsPropertySupported(PUCSXDIR, version))
            {
                list.Add(new DxfCodePair(9, PUCSXDIR));
                list.Add(new DxfCodePair(10, header.PaperspaceXAxis.X));
                list.Add(new DxfCodePair(20, header.PaperspaceXAxis.Y));
                list.Add(new DxfCodePair(30, header.PaperspaceXAxis.Z));

            }

            // PUCSYDIR
            if (IsPropertySupported(PUCSYDIR, version))
            {
                list.Add(new DxfCodePair(9, PUCSYDIR));
                list.Add(new DxfCodePair(10, header.PaperspaceYAxis.X));
                list.Add(new DxfCodePair(20, header.PaperspaceYAxis.Y));
                list.Add(new DxfCodePair(30, header.PaperspaceYAxis.Z));

            }

            // QTEXTMODE
            if (IsPropertySupported(QTEXTMODE, version))
            {
                list.Add(new DxfCodePair(9, QTEXTMODE));
			    list.Add(new DxfCodePair(70, BoolShort(header.UseQuickTextMode)));
            }

            // REGENMODE
            if (IsPropertySupported(REGENMODE, version))
            {
                list.Add(new DxfCodePair(9, REGENMODE));
			    list.Add(new DxfCodePair(70, BoolShort(header.UseRegenMode)));
            }

            // SHADEDGE
            if (IsPropertySupported(SHADEDGE, version))
            {
                list.Add(new DxfCodePair(9, SHADEDGE));
			    list.Add(new DxfCodePair(70, (short)(header.EdgeShading)));
            }

            // SHADEDIF
            if (IsPropertySupported(SHADEDIF, version))
            {
                list.Add(new DxfCodePair(9, SHADEDIF));
			    list.Add(new DxfCodePair(70, (header.PercentAmbientToDiffuse)));
            }

            // SKETCHINC
            if (IsPropertySupported(SKETCHINC, version))
            {
                list.Add(new DxfCodePair(9, SKETCHINC));
			    list.Add(new DxfCodePair(40, (header.SketchRecordIncrement)));
            }

            // SKPOLY
            if (IsPropertySupported(SKPOLY, version))
            {
                list.Add(new DxfCodePair(9, SKPOLY));
			    list.Add(new DxfCodePair(70, (short)(header.PolylineSketchMode)));
            }

            // SPLFRAME
            if (IsPropertySupported(SPLFRAME, version))
            {
                list.Add(new DxfCodePair(9, SPLFRAME));
			    list.Add(new DxfCodePair(70, BoolShort(header.DisplaySplinePolygonControl)));
            }

            // SPLINESEGS
            if (IsPropertySupported(SPLINESEGS, version))
            {
                list.Add(new DxfCodePair(9, SPLINESEGS));
			    list.Add(new DxfCodePair(70, (header.LineSegmentsPerSplinePatch)));
            }

            // SPLINETYPE
            if (IsPropertySupported(SPLINETYPE, version))
            {
                list.Add(new DxfCodePair(9, SPLINETYPE));
			    list.Add(new DxfCodePair(70, (header.PEditSplineCurveType)));
            }

            // SURFTAB1
            if (IsPropertySupported(SURFTAB1, version))
            {
                list.Add(new DxfCodePair(9, SURFTAB1));
			    list.Add(new DxfCodePair(70, (header.MeshTabulationsInFirstDirection)));
            }

            // SURFTAB2
            if (IsPropertySupported(SURFTAB2, version))
            {
                list.Add(new DxfCodePair(9, SURFTAB2));
			    list.Add(new DxfCodePair(70, (header.MeshTabulationsInSecondDirection)));
            }

            // SURFTYPE
            if (IsPropertySupported(SURFTYPE, version))
            {
                list.Add(new DxfCodePair(9, SURFTYPE));
			    list.Add(new DxfCodePair(70, (header.PEditSmoothSurfaceType)));
            }

            // SURFU
            if (IsPropertySupported(SURFU, version))
            {
                list.Add(new DxfCodePair(9, SURFU));
			    list.Add(new DxfCodePair(70, (header.PEditSmoothMDensith)));
            }

            // SURFV
            if (IsPropertySupported(SURFV, version))
            {
                list.Add(new DxfCodePair(9, SURFV));
			    list.Add(new DxfCodePair(70, (header.PEditSmoothNDensith)));
            }

            // TDCREATE
            if (IsPropertySupported(TDCREATE, version))
            {
                list.Add(new DxfCodePair(9, TDCREATE));
			    list.Add(new DxfCodePair(40, DateDouble(header.CreationDate)));
            }

            // TDINDWG
            if (IsPropertySupported(TDINDWG, version))
            {
                list.Add(new DxfCodePair(9, TDINDWG));
			    list.Add(new DxfCodePair(40, TimeSpanDouble(header.TimeInDrawing)));
            }

            // TDUPDATE
            if (IsPropertySupported(TDUPDATE, version))
            {
                list.Add(new DxfCodePair(9, TDUPDATE));
			    list.Add(new DxfCodePair(40, DateDouble(header.UpdateDate)));
            }

            // TDUSRTIMER
            if (IsPropertySupported(TDUSRTIMER, version))
            {
                list.Add(new DxfCodePair(9, TDUSRTIMER));
			    list.Add(new DxfCodePair(40, TimeSpanDouble(header.UserElapsedTimer)));
            }

            // TEXTSIZE
            if (IsPropertySupported(TEXTSIZE, version))
            {
                list.Add(new DxfCodePair(9, TEXTSIZE));
			    list.Add(new DxfCodePair(40, (header.DefaultTextHeight)));
            }

            // TEXTSTYLE
            if (IsPropertySupported(TEXTSTYLE, version))
            {
                list.Add(new DxfCodePair(9, TEXTSTYLE));
			    list.Add(new DxfCodePair(7, (header.TextStyle)));
            }

            // THICKNESS
            if (IsPropertySupported(THICKNESS, version))
            {
                list.Add(new DxfCodePair(9, THICKNESS));
			    list.Add(new DxfCodePair(40, (header.Thickness)));
            }

            // TILEMODE
            if (IsPropertySupported(TILEMODE, version))
            {
                list.Add(new DxfCodePair(9, TILEMODE));
			    list.Add(new DxfCodePair(70, BoolShort(header.PreviousReleaseTileCompatability)));
            }

            // TRACEWID
            if (IsPropertySupported(TRACEWID, version))
            {
                list.Add(new DxfCodePair(9, TRACEWID));
			    list.Add(new DxfCodePair(40, (header.TraceWidth)));
            }

            // TREEDEPTH
            if (IsPropertySupported(TREEDEPTH, version))
            {
                list.Add(new DxfCodePair(9, TREEDEPTH));
			    list.Add(new DxfCodePair(70, (header.SpacialIndexMaxDepth)));
            }

            // UCSNAME
            if (IsPropertySupported(UCSNAME, version))
            {
                list.Add(new DxfCodePair(9, UCSNAME));
			    list.Add(new DxfCodePair(2, (header.UCSName)));
            }

            // UCSORG
            if (IsPropertySupported(UCSORG, version))
            {
                list.Add(new DxfCodePair(9, UCSORG));
                list.Add(new DxfCodePair(10, header.UCSOrigin.X));
                list.Add(new DxfCodePair(20, header.UCSOrigin.Y));
                list.Add(new DxfCodePair(30, header.UCSOrigin.Z));

            }

            // UCSXDIR
            if (IsPropertySupported(UCSXDIR, version))
            {
                list.Add(new DxfCodePair(9, UCSXDIR));
                list.Add(new DxfCodePair(10, header.UCSXAxis.X));
                list.Add(new DxfCodePair(20, header.UCSXAxis.Y));
                list.Add(new DxfCodePair(30, header.UCSXAxis.Z));

            }

            // UCSYDIR
            if (IsPropertySupported(UCSYDIR, version))
            {
                list.Add(new DxfCodePair(9, UCSYDIR));
                list.Add(new DxfCodePair(10, header.UCSYAxis.X));
                list.Add(new DxfCodePair(20, header.UCSYAxis.Y));
                list.Add(new DxfCodePair(30, header.UCSYAxis.Z));

            }

            // UNITMODE
            if (IsPropertySupported(UNITMODE, version))
            {
                list.Add(new DxfCodePair(9, UNITMODE));
			    list.Add(new DxfCodePair(70, BoolShort(header.DisplayFractionsInInput)));
            }

            // USERI1
            if (IsPropertySupported(USERI1, version))
            {
                list.Add(new DxfCodePair(9, USERI1));
			    list.Add(new DxfCodePair(70, (header.UserInt1)));
            }

            // USERI2
            if (IsPropertySupported(USERI2, version))
            {
                list.Add(new DxfCodePair(9, USERI2));
			    list.Add(new DxfCodePair(70, (header.UserInt2)));
            }

            // USERI3
            if (IsPropertySupported(USERI3, version))
            {
                list.Add(new DxfCodePair(9, USERI3));
			    list.Add(new DxfCodePair(70, (header.UserInt3)));
            }

            // USERI4
            if (IsPropertySupported(USERI4, version))
            {
                list.Add(new DxfCodePair(9, USERI4));
			    list.Add(new DxfCodePair(70, (header.UserInt4)));
            }

            // USERI5
            if (IsPropertySupported(USERI5, version))
            {
                list.Add(new DxfCodePair(9, USERI5));
			    list.Add(new DxfCodePair(70, (header.UserInt5)));
            }

            // USERR1
            if (IsPropertySupported(USERR1, version))
            {
                list.Add(new DxfCodePair(9, USERR1));
			    list.Add(new DxfCodePair(40, (header.UserReal1)));
            }

            // USERR2
            if (IsPropertySupported(USERR2, version))
            {
                list.Add(new DxfCodePair(9, USERR2));
			    list.Add(new DxfCodePair(40, (header.UserReal2)));
            }

            // USERR3
            if (IsPropertySupported(USERR3, version))
            {
                list.Add(new DxfCodePair(9, USERR3));
			    list.Add(new DxfCodePair(40, (header.UserReal3)));
            }

            // USERR4
            if (IsPropertySupported(USERR4, version))
            {
                list.Add(new DxfCodePair(9, USERR4));
			    list.Add(new DxfCodePair(40, (header.UserReal4)));
            }

            // USERR5
            if (IsPropertySupported(USERR5, version))
            {
                list.Add(new DxfCodePair(9, USERR5));
			    list.Add(new DxfCodePair(40, (header.UserReal5)));
            }

            // USRTIMER
            if (IsPropertySupported(USRTIMER, version))
            {
                list.Add(new DxfCodePair(9, USRTIMER));
			    list.Add(new DxfCodePair(70, BoolShort(header.UserTimerOn)));
            }

            // VISRETAIN
            if (IsPropertySupported(VISRETAIN, version))
            {
                list.Add(new DxfCodePair(9, VISRETAIN));
			    list.Add(new DxfCodePair(70, BoolShort(header.RetainXRefDependentVisibilitySettings)));
            }

            // WORLDVIEW
            if (IsPropertySupported(WORLDVIEW, version))
            {
                list.Add(new DxfCodePair(9, WORLDVIEW));
			    list.Add(new DxfCodePair(70, BoolShort(header.SetUCSToWCSInDViewOrVPoint)));
            }

        }

        // determine if the property is supported in the specified file version
        private static Tuple<DxfAcadVersion, DxfAcadVersion> SupportedVersions(string propertyName)
        {
            Tuple<DxfAcadVersion, DxfAcadVersion> result;
            switch (propertyName)
            {
                case ACADMAINTVER:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case ACADVER:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case ANGBASE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case ANGDIR:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case ATTDIA:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case ATTMODE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case ATTREQ:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case AUNITS:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case AUPREC:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case BLIPMODE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case CECOLOR:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case CELTSCALE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case CELTYPE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case CHAMFERA:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case CHAMFERB:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case CHAMFERC:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case CHAMFERD:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case CLAYER:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case CMLJUST:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case CMLSCALE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case CMLSTYLE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case COORDS:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DELOBJ:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMALT:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMALTD:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMALTF:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMALTTD:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMALTTZ:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMALTU:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMALTZ:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMAPOST:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMASO:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMASZ:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMAUNIT:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMBLK:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMBLK1:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMBLK2:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMCEN:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMCLRD:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMCLRE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMCLRT:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMDEC:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMDLE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMDLI:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMEXE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMEXO:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMFIT:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMGAP:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMJUST:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMLFAC:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMLIM:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMPOST:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMRND:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMSAH:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMSCALE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMSD1:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMSD2:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMSHO:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMSOXD:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMSTYLE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTAD:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTDEC:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTFAC:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTIH:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTIX:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTM:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTOFL:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTOH:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTOL:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTOLJ:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTP:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTSZ:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTVP:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTXSTY:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTXT:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMTZIN:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMUNIT:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMUPT:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DIMZIN:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DISPSILH:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DRAGMODE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case DWGCODEPAGE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case ELEVATION:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case EXTMAX:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case EXTMIN:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case FILLETRAD:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case FILLMODE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case HANDLING:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case INSBASE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case LIMCHECK:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case LIMMAX:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case LIMMIN:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case LTSCALE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case LUNITS:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case LUPREC:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case MAXACTVP:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case MEASUREMENT:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case MENU:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case MIRRTEXT:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case ORTHOMODE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case OSMODE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PDMODE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PDSIZE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PELEVATION:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PEXTMAX:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PEXTMIN:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PICKSTYLE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PINSBASE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PLIMCHECK:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PLIMMAX:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PLIMMIN:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PLINEGEN:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PLINEWID:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PROXYGRAPHICS:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PSLTSCALE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PUCSNAME:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PUCSORG:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PUCSXDIR:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case PUCSYDIR:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case QTEXTMODE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case REGENMODE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case SHADEDGE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case SHADEDIF:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case SKETCHINC:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case SKPOLY:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case SPLFRAME:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case SPLINESEGS:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case SPLINETYPE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case SURFTAB1:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case SURFTAB2:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case SURFTYPE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case SURFU:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case SURFV:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case TDCREATE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case TDINDWG:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case TDUPDATE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case TDUSRTIMER:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case TEXTSIZE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case TEXTSTYLE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case THICKNESS:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case TILEMODE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case TRACEWID:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case TREEDEPTH:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case UCSNAME:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case UCSORG:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case UCSXDIR:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case UCSYDIR:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case UNITMODE:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case USERI1:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case USERI2:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case USERI3:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case USERI4:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case USERI5:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case USERR1:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case USERR2:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case USERR3:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case USERR4:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case USERR5:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case USRTIMER:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case VISRETAIN:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                case WORLDVIEW:
                    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
                default:
				    result = Tuple.Create(DxfAcadVersion.R10, DxfAcadVersion.R2013);
                    break;
            }

            return result;
        }

        // setter method
        internal static void SetHeaderVariable(string keyName, DxfCodePair pair, DxfHeader header)
        {
		    switch (keyName)
            {
                case ACADMAINTVER:
                    EnsureCode(pair, 70);
                    header.MaintenenceVersion = (pair.ShortValue);
                    break;
                case ACADVER:
                    EnsureCode(pair, 1);
                    header.Version = DxfAcadVersionStrings.StringToVersion(pair.StringValue);
                    break;
                case ANGBASE:
                    EnsureCode(pair, 50);
                    header.AngleZeroDirection = (pair.DoubleValue);
                    break;
                case ANGDIR:
                    EnsureCode(pair, 70);
                    header.AngleDirection = (DxfAngleDirection)(pair.ShortValue);
                    break;
                case ATTDIA:
                    EnsureCode(pair, 70);
                    header.ShowAttributeEntryDialogs = BoolShort(pair.ShortValue);
                    break;
                case ATTMODE:
                    EnsureCode(pair, 70);
                    header.AttributeVisibility = (DxfAttributeVisibility)(pair.ShortValue);
                    break;
                case ATTREQ:
                    EnsureCode(pair, 70);
                    header.PromptForAttributeOnInsert = BoolShort(pair.ShortValue);
                    break;
                case AUNITS:
                    EnsureCode(pair, 70);
                    header.AngleUnitFormat = (DxfAngleFormat)(pair.ShortValue);
                    break;
                case AUPREC:
                    EnsureCode(pair, 70);
                    header.AngleUnitPrecision = (pair.ShortValue);
                    break;
                case BLIPMODE:
                    EnsureCode(pair, 70);
                    header.BlipMode = BoolShort(pair.ShortValue);
                    break;
                case CECOLOR:
                    EnsureCode(pair, 62);
                    header.CurrentEntityColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case CELTSCALE:
                    EnsureCode(pair, 40);
                    header.CurrentEntityLinetypeScale = (pair.DoubleValue);
                    break;
                case CELTYPE:
                    EnsureCode(pair, 6);
                    header.CurrentEntityLinetype = (pair.StringValue);
                    break;
                case CHAMFERA:
                    EnsureCode(pair, 40);
                    header.FirstChamferDistance = (pair.DoubleValue);
                    break;
                case CHAMFERB:
                    EnsureCode(pair, 40);
                    header.SecondChamferDistance = (pair.DoubleValue);
                    break;
                case CHAMFERC:
                    EnsureCode(pair, 40);
                    header.ChamferLength = (pair.DoubleValue);
                    break;
                case CHAMFERD:
                    EnsureCode(pair, 40);
                    header.ChamferAngle = (pair.DoubleValue);
                    break;
                case CLAYER:
                    EnsureCode(pair, 8);
                    header.CurrentLayer = (pair.StringValue);
                    break;
                case CMLJUST:
                    EnsureCode(pair, 70);
                    header.CurrentMultilineJustification = (DxfJustification)(pair.ShortValue);
                    break;
                case CMLSCALE:
                    EnsureCode(pair, 40);
                    header.CurrentMultilineScale = (pair.DoubleValue);
                    break;
                case CMLSTYLE:
                    EnsureCode(pair, 2);
                    header.CurrentMultilineStyle = (pair.StringValue);
                    break;
                case COORDS:
                    EnsureCode(pair, 70);
                    header.CoordinateDisplay = (DxfCoordinateDisplay)(pair.ShortValue);
                    break;
                case DELOBJ:
                    EnsureCode(pair, 70);
                    header.RetainDeletedObjects = BoolShort(pair.ShortValue);
                    break;
                case DIMALT:
                    EnsureCode(pair, 70);
                    header.UseAlternateDimensioning = BoolShort(pair.ShortValue);
                    break;
                case DIMALTD:
                    EnsureCode(pair, 70);
                    header.AlternateDimensioningDecimalPlaces = (pair.ShortValue);
                    break;
                case DIMALTF:
                    EnsureCode(pair, 40);
                    header.AlternateDimensioningScaleFactor = (pair.DoubleValue);
                    break;
                case DIMALTTD:
                    EnsureCode(pair, 70);
                    header.AlternateDimensioningToleranceDecimalPlaces = (pair.ShortValue);
                    break;
                case DIMALTTZ:
                    EnsureCode(pair, 70);
                    header.AlternateDimensioningToleranceZeroSupression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DIMALTU:
                    EnsureCode(pair, 70);
                    header.AlternateDimensioningUnits = (DxfUnitFormat)(pair.ShortValue);
                    break;
                case DIMALTZ:
                    EnsureCode(pair, 70);
                    header.AlternateDimensioningZeroSupression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DIMAPOST:
                    EnsureCode(pair, 1);
                    header.AlternateDimensioningSuffix = (pair.StringValue);
                    break;
                case DIMASO:
                    EnsureCode(pair, 70);
                    header.CreateAssociativeDimensioning = BoolShort(pair.ShortValue);
                    break;
                case DIMASZ:
                    EnsureCode(pair, 40);
                    header.DimensioningArrowSize = (pair.DoubleValue);
                    break;
                case DIMAUNIT:
                    EnsureCode(pair, 70);
                    header.DimensioningAngleFormat = (DxfAngleFormat)(pair.ShortValue);
                    break;
                case DIMBLK:
                    EnsureCode(pair, 1);
                    header.ArrowBlockName = (pair.StringValue);
                    break;
                case DIMBLK1:
                    EnsureCode(pair, 1);
                    header.FirstArrowBlockName = (pair.StringValue);
                    break;
                case DIMBLK2:
                    EnsureCode(pair, 1);
                    header.SecondArrowBlockName = (pair.StringValue);
                    break;
                case DIMCEN:
                    EnsureCode(pair, 40);
                    header.CenterMarkSize = (pair.DoubleValue);
                    break;
                case DIMCLRD:
                    EnsureCode(pair, 70);
                    header.DimensionLineColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case DIMCLRE:
                    EnsureCode(pair, 70);
                    header.DimensionExtensionLineColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case DIMCLRT:
                    EnsureCode(pair, 70);
                    header.DimensionTextColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case DIMDEC:
                    EnsureCode(pair, 70);
                    header.DimensionUnitToleranceDecimalPlaces = (pair.ShortValue);
                    break;
                case DIMDLE:
                    EnsureCode(pair, 40);
                    header.DimensionLineExtension = (pair.DoubleValue);
                    break;
                case DIMDLI:
                    EnsureCode(pair, 40);
                    header.DimensionLineIncrement = (pair.DoubleValue);
                    break;
                case DIMEXE:
                    EnsureCode(pair, 40);
                    header.DimensionExtensionLineExtension = (pair.DoubleValue);
                    break;
                case DIMEXO:
                    EnsureCode(pair, 40);
                    header.DimensionExtensionLineOffset = (pair.DoubleValue);
                    break;
                case DIMFIT:
                    EnsureCode(pair, 70);
                    header.DimensionTextAndArrowPlacement = (DxfDimensionFit)(pair.ShortValue);
                    break;
                case DIMGAP:
                    EnsureCode(pair, 40);
                    header.DimensionLineGap = (pair.DoubleValue);
                    break;
                case DIMJUST:
                    EnsureCode(pair, 70);
                    header.DimensionTextJustification = (DxfDimensionTextJustification)(pair.ShortValue);
                    break;
                case DIMLFAC:
                    EnsureCode(pair, 40);
                    header.DimensionLinearMeasurementsScaleFactor = (pair.DoubleValue);
                    break;
                case DIMLIM:
                    EnsureCode(pair, 70);
                    header.GenerateDimensionLimits = BoolShort(pair.ShortValue);
                    break;
                case DIMPOST:
                    EnsureCode(pair, 1);
                    header.DimensioningSuffix = (pair.StringValue);
                    break;
                case DIMRND:
                    EnsureCode(pair, 40);
                    header.DimensionDistanceRoundingValue = (pair.DoubleValue);
                    break;
                case DIMSAH:
                    EnsureCode(pair, 70);
                    header.UseSeparateArrowBlocksForDimensions = BoolShort(pair.ShortValue);
                    break;
                case DIMSCALE:
                    EnsureCode(pair, 40);
                    header.DimensioningScaleFactor = (pair.DoubleValue);
                    break;
                case DIMSD1:
                    EnsureCode(pair, 70);
                    header.SuppressFirstDimensionExtensionLine = BoolShort(pair.ShortValue);
                    break;
                case DIMSD2:
                    EnsureCode(pair, 70);
                    header.SuppressSecondDimensionExtensionLine = BoolShort(pair.ShortValue);
                    break;
                case DIMSHO:
                    EnsureCode(pair, 70);
                    header.RecomputeDimensionsWhileDragging = BoolShort(pair.ShortValue);
                    break;
                case DIMSOXD:
                    EnsureCode(pair, 70);
                    header.SuppressOutsideExtensionDimensionLines = BoolShort(pair.ShortValue);
                    break;
                case DIMSTYLE:
                    EnsureCode(pair, 2);
                    header.DimensionStyleName = (pair.StringValue);
                    break;
                case DIMTAD:
                    EnsureCode(pair, 70);
                    header.TextAboveDimensionLine = BoolShort(pair.ShortValue);
                    break;
                case DIMTDEC:
                    EnsureCode(pair, 70);
                    header.DimensionToleranceDecimalPlaces = (pair.ShortValue);
                    break;
                case DIMTFAC:
                    EnsureCode(pair, 40);
                    header.DimensionToleranceDisplayScaleFactor = (pair.DoubleValue);
                    break;
                case DIMTIH:
                    EnsureCode(pair, 70);
                    header.DimensionTextInsideHorizontal = BoolShort(pair.ShortValue);
                    break;
                case DIMTIX:
                    EnsureCode(pair, 70);
                    header.ForceDimensionTextInsideExtensions = BoolShort(pair.ShortValue);
                    break;
                case DIMTM:
                    EnsureCode(pair, 40);
                    header.DimensionMinusTolerance = (pair.DoubleValue);
                    break;
                case DIMTOFL:
                    EnsureCode(pair, 70);
                    header.ForceDimensionLineExtensionsOutsideIfTextIs = BoolShort(pair.ShortValue);
                    break;
                case DIMTOH:
                    EnsureCode(pair, 70);
                    header.DimensionTextOutsideHorizontal = BoolShort(pair.ShortValue);
                    break;
                case DIMTOL:
                    EnsureCode(pair, 70);
                    header.GenerateDimensionTolerances = BoolShort(pair.ShortValue);
                    break;
                case DIMTOLJ:
                    EnsureCode(pair, 70);
                    header.DimensionToleranceVerticalJustification = (DxfJustification)(pair.ShortValue);
                    break;
                case DIMTP:
                    EnsureCode(pair, 40);
                    header.DimensionPlusTolerance = (pair.DoubleValue);
                    break;
                case DIMTSZ:
                    EnsureCode(pair, 40);
                    header.DimensioningTickSize = (pair.DoubleValue);
                    break;
                case DIMTVP:
                    EnsureCode(pair, 40);
                    header.DimensionVerticalTextPosition = (pair.DoubleValue);
                    break;
                case DIMTXSTY:
                    EnsureCode(pair, 7);
                    header.DimensionTextStyle = (pair.StringValue);
                    break;
                case DIMTXT:
                    EnsureCode(pair, 40);
                    header.DimensioningTextHeight = (pair.DoubleValue);
                    break;
                case DIMTZIN:
                    EnsureCode(pair, 70);
                    header.DimensionToleranceZeroSuppression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DIMUNIT:
                    EnsureCode(pair, 70);
                    header.DimensionUnitFormat = (DxfUnitFormat)(pair.ShortValue);
                    break;
                case DIMUPT:
                    EnsureCode(pair, 70);
                    header.DimensionCursorControlsTextPosition = BoolShort(pair.ShortValue);
                    break;
                case DIMZIN:
                    EnsureCode(pair, 70);
                    header.DimensionUnitZeroSuppression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DISPSILH:
                    EnsureCode(pair, 70);
                    header.DisplaySilhouetteCurvesInWireframeMode = BoolShort(pair.ShortValue);
                    break;
                case DRAGMODE:
                    EnsureCode(pair, 70);
                    header.DragMode = (DxfDragMode)(pair.ShortValue);
                    break;
                case DWGCODEPAGE:
                    EnsureCode(pair, 3);
                    header.DrawingCodePage = (pair.StringValue);
                    break;
                case ELEVATION:
                    EnsureCode(pair, 40);
                    header.Elevation = (pair.DoubleValue);
                    break;
                case EXTMAX:
                    SetPoint(pair, header.MaximumDrawingExtents);
                    break;
                case EXTMIN:
                    SetPoint(pair, header.MinimumDrawingExtents);
                    break;
                case FILLETRAD:
                    EnsureCode(pair, 40);
                    header.FilletRadius = (pair.DoubleValue);
                    break;
                case FILLMODE:
                    EnsureCode(pair, 70);
                    header.FillModeOn = BoolShort(pair.ShortValue);
                    break;
                case HANDLING:
                    EnsureCode(pair, 70);
                    header.NextAvailableHandle = (int)(pair.ShortValue);
                    break;
                case INSBASE:
                    SetPoint(pair, header.InsertionBase);
                    break;
                case LIMCHECK:
                    EnsureCode(pair, 70);
                    header.UseLimitsChecking = BoolShort(pair.ShortValue);
                    break;
                case LIMMAX:
                    SetPoint(pair, header.MaximumDrawingLimits);
                    break;
                case LIMMIN:
                    SetPoint(pair, header.MinimumDrawingLimits);
                    break;
                case LTSCALE:
                    EnsureCode(pair, 40);
                    header.LinetypeScale = (pair.DoubleValue);
                    break;
                case LUNITS:
                    EnsureCode(pair, 70);
                    header.UnitFormat = (DxfUnitFormat)(pair.ShortValue);
                    break;
                case LUPREC:
                    EnsureCode(pair, 70);
                    header.UnitPrecision = (pair.ShortValue);
                    break;
                case MAXACTVP:
                    EnsureCode(pair, 70);
                    header.MaximumActiveViewports = (pair.ShortValue);
                    break;
                case MEASUREMENT:
                    EnsureCode(pair, 70);
                    header.DrawingUnits = (DxfDrawingUnits)(pair.ShortValue);
                    break;
                case MENU:
                    EnsureCode(pair, 1);
                    header.FileName = (pair.StringValue);
                    break;
                case MIRRTEXT:
                    EnsureCode(pair, 70);
                    header.MirrorText = BoolShort(pair.ShortValue);
                    break;
                case ORTHOMODE:
                    EnsureCode(pair, 70);
                    header.DrawOrthoganalLines = BoolShort(pair.ShortValue);
                    break;
                case OSMODE:
                    EnsureCode(pair, 70);
                    header.ObjectSnapFlags = (int)(pair.ShortValue);
                    break;
                case PDMODE:
                    EnsureCode(pair, 70);
                    header.PointDisplayMode = (int)(pair.ShortValue);
                    break;
                case PDSIZE:
                    EnsureCode(pair, 40);
                    header.PointDisplaySize = (pair.DoubleValue);
                    break;
                case PELEVATION:
                    EnsureCode(pair, 40);
                    header.PaperspaceElevation = (pair.DoubleValue);
                    break;
                case PEXTMAX:
                    SetPoint(pair, header.PaperspaceMaximumDrawingExtents);
                    break;
                case PEXTMIN:
                    SetPoint(pair, header.PaperspaceMinimumDrawingExtents);
                    break;
                case PICKSTYLE:
                    EnsureCode(pair, 70);
                    header.PickStyle = (DxfPickStyle)(pair.ShortValue);
                    break;
                case PINSBASE:
                    SetPoint(pair, header.PaperspaceInsertionBase);
                    break;
                case PLIMCHECK:
                    EnsureCode(pair, 70);
                    header.LimitCheckingInPaperspace = BoolShort(pair.ShortValue);
                    break;
                case PLIMMAX:
                    SetPoint(pair, header.PaperspaceMaximumDrawingLimits);
                    break;
                case PLIMMIN:
                    SetPoint(pair, header.PaperspaceMinimumDrawingLimits);
                    break;
                case PLINEGEN:
                    EnsureCode(pair, 70);
                    header.IsPolylineContinuousAroundVerticies = BoolShort(pair.ShortValue);
                    break;
                case PLINEWID:
                    EnsureCode(pair, 40);
                    header.DefaultPolylineWidth = (pair.DoubleValue);
                    break;
                case PROXYGRAPHICS:
                    EnsureCode(pair, 70);
                    header.SaveProxyGraphics = BoolShort(pair.ShortValue);
                    break;
                case PSLTSCALE:
                    EnsureCode(pair, 70);
                    header.ScaleLinetypesInPaperspace = BoolShort(pair.ShortValue);
                    break;
                case PUCSNAME:
                    EnsureCode(pair, 2);
                    header.PaperspaceUCSName = (pair.StringValue);
                    break;
                case PUCSORG:
                    SetPoint(pair, header.PaperspaceUCSOrigin);
                    break;
                case PUCSXDIR:
                    SetPoint(pair, header.PaperspaceXAxis);
                    break;
                case PUCSYDIR:
                    SetPoint(pair, header.PaperspaceYAxis);
                    break;
                case QTEXTMODE:
                    EnsureCode(pair, 70);
                    header.UseQuickTextMode = BoolShort(pair.ShortValue);
                    break;
                case REGENMODE:
                    EnsureCode(pair, 70);
                    header.UseRegenMode = BoolShort(pair.ShortValue);
                    break;
                case SHADEDGE:
                    EnsureCode(pair, 70);
                    header.EdgeShading = (DxfShadeEdgeMode)(pair.ShortValue);
                    break;
                case SHADEDIF:
                    EnsureCode(pair, 70);
                    header.PercentAmbientToDiffuse = (pair.ShortValue);
                    break;
                case SKETCHINC:
                    EnsureCode(pair, 40);
                    header.SketchRecordIncrement = (pair.DoubleValue);
                    break;
                case SKPOLY:
                    EnsureCode(pair, 70);
                    header.PolylineSketchMode = (DxfPolySketchMode)(pair.ShortValue);
                    break;
                case SPLFRAME:
                    EnsureCode(pair, 70);
                    header.DisplaySplinePolygonControl = BoolShort(pair.ShortValue);
                    break;
                case SPLINESEGS:
                    EnsureCode(pair, 70);
                    header.LineSegmentsPerSplinePatch = (pair.ShortValue);
                    break;
                case SPLINETYPE:
                    EnsureCode(pair, 70);
                    header.PEditSplineCurveType = (pair.ShortValue);
                    break;
                case SURFTAB1:
                    EnsureCode(pair, 70);
                    header.MeshTabulationsInFirstDirection = (pair.ShortValue);
                    break;
                case SURFTAB2:
                    EnsureCode(pair, 70);
                    header.MeshTabulationsInSecondDirection = (pair.ShortValue);
                    break;
                case SURFTYPE:
                    EnsureCode(pair, 70);
                    header.PEditSmoothSurfaceType = (pair.ShortValue);
                    break;
                case SURFU:
                    EnsureCode(pair, 70);
                    header.PEditSmoothMDensith = (pair.ShortValue);
                    break;
                case SURFV:
                    EnsureCode(pair, 70);
                    header.PEditSmoothNDensith = (pair.ShortValue);
                    break;
                case TDCREATE:
                    EnsureCode(pair, 40);
                    header.CreationDate = DateDouble(pair.DoubleValue);
                    break;
                case TDINDWG:
                    EnsureCode(pair, 40);
                    header.TimeInDrawing = TimeSpanDouble(pair.DoubleValue);
                    break;
                case TDUPDATE:
                    EnsureCode(pair, 40);
                    header.UpdateDate = DateDouble(pair.DoubleValue);
                    break;
                case TDUSRTIMER:
                    EnsureCode(pair, 40);
                    header.UserElapsedTimer = TimeSpanDouble(pair.DoubleValue);
                    break;
                case TEXTSIZE:
                    EnsureCode(pair, 40);
                    header.DefaultTextHeight = (pair.DoubleValue);
                    break;
                case TEXTSTYLE:
                    EnsureCode(pair, 7);
                    header.TextStyle = (pair.StringValue);
                    break;
                case THICKNESS:
                    EnsureCode(pair, 40);
                    header.Thickness = (pair.DoubleValue);
                    break;
                case TILEMODE:
                    EnsureCode(pair, 70);
                    header.PreviousReleaseTileCompatability = BoolShort(pair.ShortValue);
                    break;
                case TRACEWID:
                    EnsureCode(pair, 40);
                    header.TraceWidth = (pair.DoubleValue);
                    break;
                case TREEDEPTH:
                    EnsureCode(pair, 70);
                    header.SpacialIndexMaxDepth = (pair.ShortValue);
                    break;
                case UCSNAME:
                    EnsureCode(pair, 2);
                    header.UCSName = (pair.StringValue);
                    break;
                case UCSORG:
                    SetPoint(pair, header.UCSOrigin);
                    break;
                case UCSXDIR:
                    SetPoint(pair, header.UCSXAxis);
                    break;
                case UCSYDIR:
                    SetPoint(pair, header.UCSYAxis);
                    break;
                case UNITMODE:
                    EnsureCode(pair, 70);
                    header.DisplayFractionsInInput = BoolShort(pair.ShortValue);
                    break;
                case USERI1:
                    EnsureCode(pair, 70);
                    header.UserInt1 = (pair.ShortValue);
                    break;
                case USERI2:
                    EnsureCode(pair, 70);
                    header.UserInt2 = (pair.ShortValue);
                    break;
                case USERI3:
                    EnsureCode(pair, 70);
                    header.UserInt3 = (pair.ShortValue);
                    break;
                case USERI4:
                    EnsureCode(pair, 70);
                    header.UserInt4 = (pair.ShortValue);
                    break;
                case USERI5:
                    EnsureCode(pair, 70);
                    header.UserInt5 = (pair.ShortValue);
                    break;
                case USERR1:
                    EnsureCode(pair, 40);
                    header.UserReal1 = (pair.DoubleValue);
                    break;
                case USERR2:
                    EnsureCode(pair, 40);
                    header.UserReal2 = (pair.DoubleValue);
                    break;
                case USERR3:
                    EnsureCode(pair, 40);
                    header.UserReal3 = (pair.DoubleValue);
                    break;
                case USERR4:
                    EnsureCode(pair, 40);
                    header.UserReal4 = (pair.DoubleValue);
                    break;
                case USERR5:
                    EnsureCode(pair, 40);
                    header.UserReal5 = (pair.DoubleValue);
                    break;
                case USRTIMER:
                    EnsureCode(pair, 70);
                    header.UserTimerOn = BoolShort(pair.ShortValue);
                    break;
                case VISRETAIN:
                    EnsureCode(pair, 70);
                    header.RetainXRefDependentVisibilitySettings = BoolShort(pair.ShortValue);
                    break;
                case WORLDVIEW:
                    EnsureCode(pair, 70);
                    header.SetUCSToWCSInDViewOrVPoint = BoolShort(pair.ShortValue);
                    break;
                default:
                    // unsupported variable
                    break;
            }
        }
    }
}
