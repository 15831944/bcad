// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System.Collections.Generic;

namespace BCad.Dxf.Sections
{
    public partial class DxfHeaderSection
    {
        // key names
        private const string ACADMAINTVER = "$ACADMAINTVER";
        private const string ACADVER = "$ACADVER";
        private const string ANGBASE = "$ANGBASE";
        private const string ANGDIR = "$ANGDIR";
        private const string ATTDIA = "$ATTDIA";
        private const string ATTMODE = "$ATTMODE";
        private const string ATTREQ = "$ATTREQ";
        private const string CLAYER = "$CLAYER";
        private const string LUNITS = "$LUNITS";
        private const string LUPREC = "$LUPREC";

        // properties
        public short MaintenenceVersion { get; set; }
        public DxfAcadVersion Version { get; set; }
        public double AngleZeroDirection { get; set; }
        public DxfAngleDirection AngleDirection { get; set; }
        public bool ShowAttributeEntryDialogs { get; set; }
        public DxfAttributeVisibility AttributeVisibility { get; set; }
        public bool AttReq { get; set; }
        public string CurrentLayer { get; set; }
        public DxfUnitFormat UnitFormat { get; set; }
        public short UnitPrecision { get; set; }

        // set defaults
        private void SetDefaults()
        {
            this.MaintenenceVersion = 0; // ACADMAINTVER
            this.Version = DxfAcadVersion.R14; // ACADVER
            this.AngleZeroDirection = 0.0; // ANGBASE
            this.AngleDirection = DxfAngleDirection.CounterClockwise; // ANGDIR
            this.ShowAttributeEntryDialogs = false; // ATTDIA
            this.AttributeVisibility = DxfAttributeVisibility.None; // ATTMODE
            this.AttReq = true; // ATTREQ
            this.CurrentLayer = "0"; // CLAYER
            this.UnitFormat = DxfUnitFormat.None; // LUNITS
            this.UnitPrecision = 12; // LUPREC
        }

        // build list of code value pairs
        internal static void AddValueToList(List<DxfCodePair> list, DxfHeaderSection header)
        {
            // ACADMAINTVER
            list.Add(new DxfCodePair(9, ACADMAINTVER));
			list.Add(new DxfCodePair(70, (header.MaintenenceVersion)));

            // ACADVER
            list.Add(new DxfCodePair(9, ACADVER));
			list.Add(new DxfCodePair(1, DxfAcadVersionStrings.VersionToString(header.Version)));

            // ANGBASE
            list.Add(new DxfCodePair(9, ANGBASE));
			list.Add(new DxfCodePair(50, (header.AngleZeroDirection)));

            // ANGDIR
            list.Add(new DxfCodePair(9, ANGDIR));
			list.Add(new DxfCodePair(70, (header.AngleDirection)));

            // ATTDIA
            list.Add(new DxfCodePair(9, ATTDIA));
			list.Add(new DxfCodePair(70, BoolToShort(header.ShowAttributeEntryDialogs)));

            // ATTMODE
            list.Add(new DxfCodePair(9, ATTMODE));
			list.Add(new DxfCodePair(70, (header.AttributeVisibility)));

            // ATTREQ
            list.Add(new DxfCodePair(9, ATTREQ));
			list.Add(new DxfCodePair(70, BoolToShort(header.AttReq)));

            // CLAYER
            list.Add(new DxfCodePair(9, CLAYER));
			list.Add(new DxfCodePair(8, (header.CurrentLayer)));

            // LUNITS
            list.Add(new DxfCodePair(9, LUNITS));
			list.Add(new DxfCodePair(70, (header.UnitFormat)));

            // LUPREC
            list.Add(new DxfCodePair(9, LUPREC));
			list.Add(new DxfCodePair(70, (header.UnitPrecision)));

        }

        // setter method
        internal static void SetHeaderVariable(string keyName, DxfCodePair pair, DxfHeaderSection header)
        {
		    switch (keyName)
            {
                case ACADMAINTVER:
                    EnsureCode(pair, 70);
                    header.MaintenenceVersion = (pair.ShortValue);
                    break;
                case ACADVER:
                    EnsureCode(pair, 1);
                    header.Version = DxfAcadVersionStrings.StringToVersion(pair.StringValue);
                    break;
                case ANGBASE:
                    EnsureCode(pair, 50);
                    header.AngleZeroDirection = (pair.DoubleValue);
                    break;
                case ANGDIR:
                    EnsureCode(pair, 70);
                    header.AngleDirection = (DxfAngleDirection)(pair.ShortValue);
                    break;
                case ATTDIA:
                    EnsureCode(pair, 70);
                    header.ShowAttributeEntryDialogs = ShortToBool(pair.ShortValue);
                    break;
                case ATTMODE:
                    EnsureCode(pair, 70);
                    header.AttributeVisibility = (DxfAttributeVisibility)(pair.ShortValue);
                    break;
                case ATTREQ:
                    EnsureCode(pair, 70);
                    header.AttReq = ShortToBool(pair.ShortValue);
                    break;
                case CLAYER:
                    EnsureCode(pair, 8);
                    header.CurrentLayer = (pair.StringValue);
                    break;
                case LUNITS:
                    EnsureCode(pair, 70);
                    header.UnitFormat = (DxfUnitFormat)(pair.ShortValue);
                    break;
                case LUPREC:
                    EnsureCode(pair, 70);
                    header.UnitPrecision = (pair.ShortValue);
                    break;
                default:
                    // unsupported variable
                    break;
            }
        }
    }
}
