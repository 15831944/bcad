<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)\BCad.Dxf.Helper\bin\Debug\BCad.Dxf.Helper.exe" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="BCad.Dxf" #>
<#@ output extension=".cs" #>
<#
var xml = XDocument.Load(this.Host.ResolvePath(@"EntitiesSpec.xml")).Root;
var xmlns = "http://IxMilia.com/Dxf/EntitiesSpec";
var entities = xml.Elements(XName.Get("Entity", xmlns)).Where(x => x.Attribute("Name").Value != "DxfEntity");
Func<XElement, IEnumerable<XElement>> GetProperties = (x) => x.Elements(XName.Get("Property", xmlns));
#>
// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;

namespace BCad.Dxf.Entities
{

    public enum DxfEntityType
    {
<#
foreach (var entity in entities.OrderBy(e => EntityType(e)))
{
#>
        <#= EntityType(entity) #>,
<#
}
#>
    }

<#
var baseEntity = xml.Elements(XName.Get("Entity", xmlns)).Where(x => Name(x) == "DxfEntity").Single();
#>
    /// <summary>
    /// DxfEntity class
    /// </summary>
    public partial class DxfEntity
    {
<#
foreach (var property in GetProperties(baseEntity))
{
#>
        public <#= Type(property) #> <#= Name(property) #> { get; set; }
<#
} // foreach property
#>

        public string EntityTypeString
        {
            get
            {
                switch (EntityType)
                {
<#
foreach (var entity in entities)
{
#>
                    case DxfEntityType.<#= EntityType(entity) #>:
                        return "<#= TypeString(entity) #>";
<#
} // foreach entity
#>
                    default:
                        throw new NotImplementedException();
                }
            }
        }

        protected DxfEntity()
        {
<#
foreach (var property in GetProperties(baseEntity))
{
#>
            this.<#= Name(property) #> = <#= DefaultValue(property) #>;
<#
} // foreach property
#>
        }

        protected virtual void AddValuePairs(List<DxfCodePair> pairs)
        {
            pairs.Add(new DxfCodePair(0, EntityTypeString));
<#
foreach (var property in GetProperties(baseEntity))
{
	var disableAtt = property.Attribute("DisableWritingDefault");
	var disableWriting = disableAtt != null && bool.Parse(disableAtt.Value);
	if (disableWriting)
	{
#>
            if (this.<#= Name(property) #> != <#= DefaultValue(property) #>)
            {
<#
	} // if
#>
<# if (disableWriting) { #>    <# } #>            pairs.Add(new DxfCodePair(<#= Code(property) #>, <#= WriteConverter(property) #>(<#= Name(property) #>)));
<#
	if (disableWriting)
	{
#>
            }

<#
	}
} // foreach property
#>
        }

        internal virtual bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
<#
foreach (var property in GetProperties(baseEntity))
{
	var code = Code(property);
	var name = Name(property);
	var codes = GetCodeOverrides(property);
	if (codes != null)
	{
		var suffix = 'X';
		for (int i = 0; i < codes.Length; i++, suffix++)
		{
#>
                case <#= codes[i] #>:
                    this.<#= name #>.<#= suffix #> = pair.DoubleValue;
                    break;
<#
		} // for
	} // if
	else
	{
		var codeType = DxfCodePair.ExpectedType(code);
		var codeTypeValue = TypeToString(codeType);
#>
                case <#= code #>:
                    this.<#= name #> = <#= ReadConverter(property) #>(pair.<#= codeTypeValue #>);
                    break;
<#
	} // else
}
#>
                default:
                    return false;
            }

            return true;
        }

        internal static DxfEntity FromBuffer(DxfCodePairBufferReader buffer)
        {
            var first = buffer.Peek();
            buffer.Advance();
            DxfEntity entity;
            switch (first.StringValue)
            {
<#
foreach (var entity in entities)
{
#>
                case "<#= TypeString(entity) #>":
                    entity = new <#= Name(entity) #>();
                    break;
<#
} // foreach entity
#>
                default:
                    SwallowEntity(buffer);
                    entity = null;
                    break;
            }

            if (entity != null)
            {
                while (buffer.ItemsRemain)
                {
                    var pair = buffer.Peek();
                    if (pair.Code == 0)
                    {
                        break;
                    }
			    
                    entity.TrySetPair(pair);
                    buffer.Advance();
                }
            }

            return entity;
        }
    }

<#
foreach (var entity in entities)
{
    var className = Name(entity);
	var baseClass = BaseClass(entity);
#>
    /// <summary>
    /// <#= className #> class
    /// </summary>
    public partial class <#= className #> : <#= baseClass #>
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.<#= EntityType(entity) #>; } }

<#
	//
	// Properties
	//
	foreach (var property in GetProperties(entity))
	{
		var propertyType = Type(property);
		if (AllowMultiples(property))
		{
			propertyType = string.Format("List<{0}>", propertyType);
		}
#>
        public <#= propertyType #> <#= Name(property) #> { get; set; }

<#
	} // foreach property

	foreach (var property in GetProperties(entity))
	{
		var flags = property.Elements(XName.Get("Flag", xmlns));
		if (flags.Any())
		{
#>
        // <#= Name(property) #> flags
<#
			foreach (var flag in flags)
			{
#>
        public bool <#= Name(flag) #>
        {
            get { return DxfHelpers.GetFlag(<#= Name(property) #>, <#= Mask(flag) #>); }
            set
            {
                var flags = <#= Name(property) #>;
                DxfHelpers.SetFlag(value, ref flags, <#= Mask(flag) #>);
                <#= Name(property) #> = flags;
            }
        }

<#
			} // foreach flag
		} // if
	} // foreach property

	//
	// Default constructor
	//
#>
        public <#= className #>()
            : base()
        {
<#
    foreach (var property in GetProperties(entity))
	{
		var defaultValue = AllowMultiples(property)
			? string.Format("new List<{0}>()", Type(property))
			: DefaultValue(property);
#>
            this.<#= Name(property) #> = <#= defaultValue #>;
<#
	} // foreach property
#>
        }

<#
	var constructors = entity.Elements(XName.Get("Constructor", xmlns));
	if (constructors.Any())
	{
#>
        //
        // Parameterized constructors
        //
<#
		foreach (var constructor in constructors)
		{
			var parameters = constructor.Elements(XName.Get("ConstructorParameter", xmlns));
			var argList = new List<string>();
			foreach (var parameter in parameters)
			{
				var paramName = CamlCase(Property(parameter));
				var paramType = Type(parameter);
				argList.Add(paramType + " " + paramName);
			}

			var sig = string.Join(", ", argList);
#>
        public <#= className #>(<#= sig #>)
            : this()
        {
<#
			foreach (var parameter in parameters)
			{
#>
            this.<#= Property(parameter) #> = <#= CamlCase(Property(parameter)) #>;
<#
			} // foreach parameter
#>
        }

<#
		} // foreach constructor
	} // if
#>
        protected override void AddValuePairs(List<DxfCodePair> pairs)
        {
            base.AddValuePairs(pairs);
<#
	if (SubclassMarker(entity) != null)
	{
#>
            pairs.Add(new DxfCodePair(100, "<#= SubclassMarker(entity) #>"));
<#
	} // if
#>
<#
    foreach (var property in GetProperties(entity))
	{
		var disableWriting = DisableWritingDefault(property);
		if (disableWriting)
		{
#>
            if (this.<#= Name(property) #> != <#= DefaultValue(property) #>)
            {
<#
		} // if

		var codes = GetCodeOverrides(property);
        if (codes != null)
		{
			var suffix = 'X';
			for (int i = 0; i < codes.Length; i++, suffix++)
			{
#>
<# if (disableWriting) { #>    <# } #>            pairs.Add(new DxfCodePair(<#= codes[i] #>, <#= Name(property) #>.<#= suffix #>));
<#
			} // for
		} // if
		else
		{
			var code = Code(property);
			var name = Name(property);
			if (AllowMultiples(property))
			{
#>
<# if (disableWriting) { #>    <# } #>            pairs.AddRange(<#= name #>.Select(value => new DxfCodePair(<#= code #>, value)));
<#
			} // if
			else
			{
#>
<# if (disableWriting) { #>    <# } #>            pairs.Add(new DxfCodePair(<#= code #>, <#= WriteConverter(property) #>(<#= Name(property) #>)));
<#
			} // else
		} // else

		if (disableWriting)
		{
#>
            }

<#
		} // if
	} // foreach property
#>
        }
<#
	if (GetProperties(entity).Any())
	{
#>

        internal override bool TrySetPair(DxfCodePair pair)
        {
            if (base.TrySetPair(pair)) return true;
            switch (pair.Code)
            {
<#
		foreach (var propertyGroup in GetProperties(entity).GroupBy(p => Code(p)).OrderBy(p => p.Key))
		{
			var code = propertyGroup.Key;
			if (propertyGroup.Count() == 1)
			{
				var property = propertyGroup.Single();
				var name = Name(property);
				var codes = GetCodeOverrides(property);
				if (codes != null)
				{
					var suffix = 'X';
					for (int i = 0; i < codes.Length; i++)
					{
#>
                case <#= codes[i] #>:
                    this.<#= name #>.<#= suffix #> = pair.DoubleValue;
                    break;
<#
					} // for
				} // if
				else
				{
					var codeType = DxfCodePair.ExpectedType(code);
					var codeTypeValue = TypeToString(codeType);
					var assignCode = AllowMultiples(property)
						? string.Format("this.{0}.Add(", Name(property))
						: string.Format("this.{0} = ", Name(property));
					var assignSuffix = AllowMultiples(property)
						? ")"
						: "";
#>
                case <#= code #>:
                    <#= assignCode #><#= ReadConverter(property) #>(pair.<#= codeTypeValue #>)<#= assignSuffix #>;
                    break;
<#
				} // else
			} // if one property per code
			else
			{
#>
                case <#= code #>:
                    // TODO: code is shared by properties <#= string.Join(", ", propertyGroup.Select(p => Name(p))) #>
                    break;
<#
			} // else multiple properties per code
		} // foreach property
#>
                default:
                    return false;
            }

            return true;
        }
<#
	} // if
#>
    }

<#
} // foreach entity
#>
}
<#+
string SubclassMarker(XElement entity)
{
	var value = entity.Attribute("SubclassMarker").Value;
	return value == "null" ? null : value;
}

string EntityType(XElement entity)
{
	return entity.Attribute("EntityType").Value;
}

string TypeString(XElement entity)
{
	return entity.Attribute("TypeString").Value;
}

string BaseClass(XElement entity)
{
	var att = entity.Attribute("BaseClass");
	return att == null ? "DxfEntity" : att.Value;
}

bool DisableWritingDefault(XElement property)
{
	var att = property.Attribute("DisableWritingDefault");
	return att != null && bool.Parse(att.Value);
}

string Type(XElement property)
{
	return property.Attribute("Type").Value;
}

string ReadConverter(XElement property)
{
	var att = property.Attribute("ReadConverter");
	return att == null ? string.Empty : att.Value;
}

string WriteConverter(XElement property)
{
	var att = property.Attribute("WriteConverter");
	return att == null ? string.Empty : att.Value;
}

string Name(XElement property)
{
	return property.Attribute("Name").Value;
}

int Code(XElement property)
{
	return int.Parse(property.Attribute("Code").Value);
}

string Property(XElement flag)
{
	return flag.Attribute("Property").Value;
}

int Mask(XElement flag)
{
	return int.Parse(flag.Attribute("Mask").Value);
}

int[] GetCodeOverrides(XElement property)
{
	var codesAtt = property.Attribute("CodeOverrides");
	return codesAtt == null ? null : codesAtt.Value.Split(',').Select(c => int.Parse(c)).ToArray();
}

string DefaultValue(XElement property)
{
	var value = property.Attribute("DefaultValue").Value;
	if (property.Attribute("Type").Value == "string" && value != "null")
	{
		value = string.Format("\"{0}\"", value);
	}

	return value;
}

bool AllowMultiples(XElement property)
{
	var att = property.Attribute("AllowMultiples");
	return att != null && bool.Parse(att.Value);
}

string CamlCase(string value)
{
	return char.ToLower(value[0]) + value.Substring(1);
}

string TypeToString(Type type)
{
    string expected;
    if (type == typeof(string)) expected = "String";
	else if (type == typeof(double)) expected = "Double";
	else if (type == typeof(short)) expected = "Short";
	else if (type == typeof(int)) expected = "Integer";
	else if (type == typeof(long)) expected = "Long";
	else if (type == typeof(bool)) expected = "Bool";
	else throw new Exception("Unsupported code pair type");
	// TODO: handle

    return expected + "Value";
}
#>
