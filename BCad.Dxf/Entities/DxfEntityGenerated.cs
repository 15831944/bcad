// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using BCad.Dxf.Entities;

namespace BCad.Dxf.Entities
{

    /// <summary>
    /// DxfEntity class
    /// </summary>
    public partial class DxfEntity
    {
        public string Handle { get; set; }
        public bool IsInPaperSpace { get; set; }
        public string Layer { get; set; }
        public string LinetypeName { get; set; }
        public DxfColor Color { get; set; }
        public double LinetypeScale { get; set; }
        public bool IsVisible { get; set; }

        public string EntityTypeString
        {
            get
            {
                switch (EntityType)
                {
                    case DxfEntityType.Arc:
                        return "ARC";
                    case DxfEntityType.Circle:
                        return "CIRCLE";
                    case DxfEntityType.Ellipse:
                        return "ELLIPSE";
                    case DxfEntityType.Line:
                        return "LINE";
                    case DxfEntityType.Polyline:
                        return "POLYLINE";
                    case DxfEntityType.Seqend:
                        return "SEQEND";
                    case DxfEntityType.Solid:
                        return "SOLID";
                    case DxfEntityType.Text:
                        return "TEXT";
                    case DxfEntityType.Vertex:
                        return "VERTEX";
                    default:
                        throw new NotImplementedException();
                }
            }
        }

        protected DxfEntity()
        {
            this.Handle = null;
            this.IsInPaperSpace = false;
            this.Layer = "0";
            this.LinetypeName = "BYLAYER";
            this.Color = DxfColor.ByLayer;
            this.LinetypeScale = 1.0;
            this.IsVisible = true;
        }

        protected virtual void AddValuePairs(IList<DxfCodePair> pairs)
        {
            pairs.Add(new DxfCodePair(0, EntityTypeString));
            pairs.Add(new DxfCodePair(5, (Handle)));
            if (this.IsInPaperSpace != false)
            {
                pairs.Add(new DxfCodePair(67, BoolShort(IsInPaperSpace)));
            }

            pairs.Add(new DxfCodePair(8, (Layer)));
            if (this.LinetypeName != "BYLAYER")
            {
                pairs.Add(new DxfCodePair(6, (LinetypeName)));
            }

            if (this.Color != DxfColor.ByLayer)
            {
                pairs.Add(new DxfCodePair(62, DxfColor.GetRawValue(Color)));
            }

            if (this.LinetypeScale != 1.0)
            {
                pairs.Add(new DxfCodePair(48, (LinetypeScale)));
            }

            if (this.IsVisible != true)
            {
                pairs.Add(new DxfCodePair(60, NotBoolShort(IsVisible)));
            }

        }

        internal virtual bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 5:
                    this.Handle = (pair.StringValue);
                    break;
                case 67:
                    this.IsInPaperSpace = BoolShort(pair.ShortValue);
                    break;
                case 8:
                    this.Layer = (pair.StringValue);
                    break;
                case 6:
                    this.LinetypeName = (pair.StringValue);
                    break;
                case 62:
                    this.Color = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case 48:
                    this.LinetypeScale = (pair.DoubleValue);
                    break;
                case 60:
                    this.IsVisible = !BoolShort(pair.ShortValue);
                    break;
                default:
                    return false;
            }

            return true;
        }

        internal static DxfEntity FromBuffer(DxfCodePairBufferReader buffer)
        {
            var first = buffer.Peek();
            buffer.Advance();
            DxfEntity entity;
            switch (first.StringValue)
            {
                case "ARC":
                    entity = new DxfArc();
                    break;
                case "CIRCLE":
                    entity = new DxfCircle();
                    break;
                case "ELLIPSE":
                    entity = new DxfEllipse();
                    break;
                case "LINE":
                    entity = new DxfLine();
                    break;
                case "POLYLINE":
                    entity = new DxfPolyline();
                    break;
                case "SEQEND":
                    entity = new DxfSeqend();
                    break;
                case "SOLID":
                    entity = new DxfSolid();
                    break;
                case "TEXT":
                    entity = new DxfText();
                    break;
                case "VERTEX":
                    entity = new DxfVertex();
                    break;
                default:
                    SwallowEntity(buffer);
                    entity = null;
                    break;
            }

            if (entity != null)
            {
                while (buffer.ItemsRemain)
                {
                    var pair = buffer.Peek();
                    if (pair.Code == 0)
                    {
                        break;
                    }
			    
                    entity.TrySetPair(pair);
                    buffer.Advance();
                }
            }

            return entity;
        }
    }

    /// <summary>
    /// DxfArc class
    /// </summary>
    public partial class DxfArc : DxfCircle
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Arc; } }

        public double StartAngle { get; set; }

        public double EndAngle { get; set; }

        public DxfArc()
            : base()
        {
            this.StartAngle = 0.0;
            this.EndAngle = 360.0;
        }

        //
        // Parameterized constructors
        //
        public DxfArc(DxfPoint center, double radius, double startAngle, double endAngle)
            : this()
        {
            this.Center = center;
            this.Radius = radius;
            this.StartAngle = startAngle;
            this.EndAngle = endAngle;
        }

        protected override void AddValuePairs(IList<DxfCodePair> pairs)
        {
            base.AddValuePairs(pairs);
            pairs.Add(new DxfCodePair(100, "AcDbArc"));
            pairs.Add(new DxfCodePair(50, (StartAngle)));
            pairs.Add(new DxfCodePair(51, (EndAngle)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            if (base.TrySetPair(pair)) return true;
            switch (pair.Code)
            {
                case 50:
                    this.StartAngle = (pair.DoubleValue);
                    break;
                case 51:
                    this.EndAngle = (pair.DoubleValue);
                    break;
                default:
                    return false;
            }

            return true;
        }
    }

    /// <summary>
    /// DxfCircle class
    /// </summary>
    public partial class DxfCircle : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Circle; } }

        public double Thickness { get; set; }

        public DxfPoint Center { get; set; }

        public double Radius { get; set; }

        public DxfVector Normal { get; set; }

        public DxfCircle()
            : base()
        {
            this.Thickness = 0.0;
            this.Center = DxfPoint.Origin;
            this.Radius = 0.0;
            this.Normal = DxfVector.ZAxis;
        }

        //
        // Parameterized constructors
        //
        public DxfCircle(DxfPoint center, double radius)
            : this()
        {
            this.Center = center;
            this.Radius = radius;
        }

        protected override void AddValuePairs(IList<DxfCodePair> pairs)
        {
            base.AddValuePairs(pairs);
            pairs.Add(new DxfCodePair(100, "AcDbCircle"));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (Thickness)));
            }

            pairs.Add(new DxfCodePair(10, Center.X));
            pairs.Add(new DxfCodePair(20, Center.Y));
            pairs.Add(new DxfCodePair(30, Center.Z));
            pairs.Add(new DxfCodePair(40, (Radius)));
            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal.X));
                pairs.Add(new DxfCodePair(220, Normal.Y));
                pairs.Add(new DxfCodePair(230, Normal.Z));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            if (base.TrySetPair(pair)) return true;
            switch (pair.Code)
            {
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 10:
                    this.Center.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Center.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Center.Z = pair.DoubleValue;
                    break;
                case 40:
                    this.Radius = (pair.DoubleValue);
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                default:
                    return false;
            }

            return true;
        }
    }

    /// <summary>
    /// DxfEllipse class
    /// </summary>
    public partial class DxfEllipse : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Ellipse; } }

        public DxfPoint Center { get; set; }

        public DxfVector MajorAxis { get; set; }

        public DxfVector Normal { get; set; }

        public double MinorAxisRatio { get; set; }

        public double StartParameter { get; set; }

        public double EndParameter { get; set; }

        public DxfEllipse()
            : base()
        {
            this.Center = DxfPoint.Origin;
            this.MajorAxis = DxfVector.XAxis;
            this.Normal = DxfVector.ZAxis;
            this.MinorAxisRatio = 1.0;
            this.StartParameter = 0.0;
            this.EndParameter = Math.PI * 2;
        }

        //
        // Parameterized constructors
        //
        public DxfEllipse(DxfPoint center, DxfVector majorAxis, double minorAxisRatio)
            : this()
        {
            this.Center = center;
            this.MajorAxis = majorAxis;
            this.MinorAxisRatio = minorAxisRatio;
        }

        protected override void AddValuePairs(IList<DxfCodePair> pairs)
        {
            base.AddValuePairs(pairs);
            pairs.Add(new DxfCodePair(100, "AcDbEllipse"));
            pairs.Add(new DxfCodePair(10, Center.X));
            pairs.Add(new DxfCodePair(20, Center.Y));
            pairs.Add(new DxfCodePair(30, Center.Z));
            pairs.Add(new DxfCodePair(11, MajorAxis.X));
            pairs.Add(new DxfCodePair(21, MajorAxis.Y));
            pairs.Add(new DxfCodePair(31, MajorAxis.Z));
            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal.X));
                pairs.Add(new DxfCodePair(220, Normal.Y));
                pairs.Add(new DxfCodePair(230, Normal.Z));
            }

            pairs.Add(new DxfCodePair(40, (MinorAxisRatio)));
            pairs.Add(new DxfCodePair(41, (StartParameter)));
            pairs.Add(new DxfCodePair(42, (EndParameter)));
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            if (base.TrySetPair(pair)) return true;
            switch (pair.Code)
            {
                case 10:
                    this.Center.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Center.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Center.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.MajorAxis.X = pair.DoubleValue;
                    break;
                case 21:
                    this.MajorAxis.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.MajorAxis.Z = pair.DoubleValue;
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                case 40:
                    this.MinorAxisRatio = (pair.DoubleValue);
                    break;
                case 41:
                    this.StartParameter = (pair.DoubleValue);
                    break;
                case 42:
                    this.EndParameter = (pair.DoubleValue);
                    break;
                default:
                    return false;
            }

            return true;
        }
    }

    /// <summary>
    /// DxfLine class
    /// </summary>
    public partial class DxfLine : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Line; } }

        public double Thickness { get; set; }

        public DxfPoint P1 { get; set; }

        public DxfPoint P2 { get; set; }

        public DxfVector ExtrusionDirection { get; set; }

        public DxfLine()
            : base()
        {
            this.Thickness = 0.0;
            this.P1 = DxfPoint.Origin;
            this.P2 = DxfPoint.Origin;
            this.ExtrusionDirection = DxfVector.ZAxis;
        }

        //
        // Parameterized constructors
        //
        public DxfLine(DxfPoint p1, DxfPoint p2)
            : this()
        {
            this.P1 = p1;
            this.P2 = p2;
        }

        protected override void AddValuePairs(IList<DxfCodePair> pairs)
        {
            base.AddValuePairs(pairs);
            pairs.Add(new DxfCodePair(100, "AcDbLine"));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (Thickness)));
            }

            pairs.Add(new DxfCodePair(10, P1.X));
            pairs.Add(new DxfCodePair(20, P1.Y));
            pairs.Add(new DxfCodePair(30, P1.Z));
            pairs.Add(new DxfCodePair(11, P2.X));
            pairs.Add(new DxfCodePair(21, P2.Y));
            pairs.Add(new DxfCodePair(31, P2.Z));
            if (this.ExtrusionDirection != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
                pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
                pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            if (base.TrySetPair(pair)) return true;
            switch (pair.Code)
            {
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 10:
                    this.P1.X = pair.DoubleValue;
                    break;
                case 20:
                    this.P1.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.P1.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.P2.X = pair.DoubleValue;
                    break;
                case 21:
                    this.P2.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.P2.Z = pair.DoubleValue;
                    break;
                case 210:
                    this.ExtrusionDirection.X = pair.DoubleValue;
                    break;
                case 220:
                    this.ExtrusionDirection.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.ExtrusionDirection.Z = pair.DoubleValue;
                    break;
                default:
                    return false;
            }

            return true;
        }
    }

    /// <summary>
    /// DxfPolyline class
    /// </summary>
    public partial class DxfPolyline : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Polyline; } }

        public DxfPoint Location { get; set; }

        public double Thickness { get; set; }

        public int Flags { get; set; }

        public double DefaultStartingWidth { get; set; }

        public double DefaultEndingWidth { get; set; }

        public int PolygonMeshMVertexCount { get; set; }

        public int PolygonMeshNVertexCount { get; set; }

        public int SmoothSurfaceMDensity { get; set; }

        public int SmoothSurfaceNDensity { get; set; }

        public DxfPolylineCurvedAndSmoothSurfaceType SurfaceType { get; set; }

        public DxfVector Normal { get; set; }

        // Flags flags
        public bool IsClosed
        {
            get { return DxfHelpers.GetFlag(Flags, 1); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                Flags = flags;
            }
        }

        public bool CurveFitVerticiesAdded
        {
            get { return DxfHelpers.GetFlag(Flags, 2); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                Flags = flags;
            }
        }

        public bool SplineFitVerticiesAdded
        {
            get { return DxfHelpers.GetFlag(Flags, 4); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                Flags = flags;
            }
        }

        public bool Is3DPolyline
        {
            get { return DxfHelpers.GetFlag(Flags, 8); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                Flags = flags;
            }
        }

        public bool Is3DPolygonMesh
        {
            get { return DxfHelpers.GetFlag(Flags, 16); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 16);
                Flags = flags;
            }
        }

        public bool IsPolygonMeshClosedInNDirection
        {
            get { return DxfHelpers.GetFlag(Flags, 32); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 32);
                Flags = flags;
            }
        }

        public bool IsPolyfaceMesh
        {
            get { return DxfHelpers.GetFlag(Flags, 64); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 64);
                Flags = flags;
            }
        }

        public bool IsLinetypePatternGeneratedContinuously
        {
            get { return DxfHelpers.GetFlag(Flags, 128); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 128);
                Flags = flags;
            }
        }

        public DxfPolyline()
            : base()
        {
            this.Location = DxfPoint.Origin;
            this.Thickness = 0.0;
            this.Flags = 0;
            this.DefaultStartingWidth = 0.0;
            this.DefaultEndingWidth = 0.0;
            this.PolygonMeshMVertexCount = 0;
            this.PolygonMeshNVertexCount = 0;
            this.SmoothSurfaceMDensity = 0;
            this.SmoothSurfaceNDensity = 0;
            this.SurfaceType = DxfPolylineCurvedAndSmoothSurfaceType.None;
            this.Normal = DxfVector.ZAxis;
        }

        protected override void AddValuePairs(IList<DxfCodePair> pairs)
        {
            base.AddValuePairs(pairs);
            pairs.Add(new DxfCodePair(100, "AcDb2dPolyline"));
            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (Thickness)));
            }

            if (this.Flags != 0)
            {
                pairs.Add(new DxfCodePair(70, (short)(Flags)));
            }

            if (this.DefaultStartingWidth != 0.0)
            {
                pairs.Add(new DxfCodePair(40, (DefaultStartingWidth)));
            }

            if (this.DefaultEndingWidth != 0.0)
            {
                pairs.Add(new DxfCodePair(41, (DefaultEndingWidth)));
            }

            if (this.PolygonMeshMVertexCount != 0)
            {
                pairs.Add(new DxfCodePair(71, (short)(PolygonMeshMVertexCount)));
            }

            if (this.PolygonMeshNVertexCount != 0)
            {
                pairs.Add(new DxfCodePair(72, (short)(PolygonMeshNVertexCount)));
            }

            if (this.SmoothSurfaceMDensity != 0)
            {
                pairs.Add(new DxfCodePair(73, (short)(SmoothSurfaceMDensity)));
            }

            if (this.SmoothSurfaceNDensity != 0)
            {
                pairs.Add(new DxfCodePair(74, (short)(SmoothSurfaceNDensity)));
            }

            if (this.SurfaceType != DxfPolylineCurvedAndSmoothSurfaceType.None)
            {
                pairs.Add(new DxfCodePair(75, (short)(SurfaceType)));
            }

            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal.X));
                pairs.Add(new DxfCodePair(220, Normal.Y));
                pairs.Add(new DxfCodePair(230, Normal.Z));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            if (base.TrySetPair(pair)) return true;
            switch (pair.Code)
            {
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 70:
                    this.Flags = (int)(pair.ShortValue);
                    break;
                case 40:
                    this.DefaultStartingWidth = (pair.DoubleValue);
                    break;
                case 41:
                    this.DefaultEndingWidth = (pair.DoubleValue);
                    break;
                case 71:
                    this.PolygonMeshMVertexCount = (int)(pair.ShortValue);
                    break;
                case 72:
                    this.PolygonMeshNVertexCount = (int)(pair.ShortValue);
                    break;
                case 73:
                    this.SmoothSurfaceMDensity = (int)(pair.ShortValue);
                    break;
                case 74:
                    this.SmoothSurfaceNDensity = (int)(pair.ShortValue);
                    break;
                case 75:
                    this.SurfaceType = (DxfPolylineCurvedAndSmoothSurfaceType)(pair.ShortValue);
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                default:
                    return false;
            }

            return true;
        }
    }

    /// <summary>
    /// DxfSeqend class
    /// </summary>
    public partial class DxfSeqend : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Seqend; } }

        public DxfSeqend()
            : base()
        {
        }

        protected override void AddValuePairs(IList<DxfCodePair> pairs)
        {
            base.AddValuePairs(pairs);
        }

    }

    /// <summary>
    /// DxfSolid class
    /// </summary>
    public partial class DxfSolid : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Solid; } }

        public DxfPoint FirstCorner { get; set; }

        public DxfPoint SecondCorner { get; set; }

        public DxfPoint ThirdCorner { get; set; }

        public DxfPoint FourthCorner { get; set; }

        public double Thickness { get; set; }

        public DxfVector ExtrusionDirection { get; set; }

        public DxfSolid()
            : base()
        {
            this.FirstCorner = DxfPoint.Origin;
            this.SecondCorner = DxfPoint.Origin;
            this.ThirdCorner = DxfPoint.Origin;
            this.FourthCorner = null;
            this.Thickness = 0.0;
            this.ExtrusionDirection = DxfVector.ZAxis;
        }

        protected override void AddValuePairs(IList<DxfCodePair> pairs)
        {
            base.AddValuePairs(pairs);
            pairs.Add(new DxfCodePair(100, "AcDbShape"));
            pairs.Add(new DxfCodePair(10, FirstCorner.X));
            pairs.Add(new DxfCodePair(20, FirstCorner.Y));
            pairs.Add(new DxfCodePair(30, FirstCorner.Z));
            pairs.Add(new DxfCodePair(11, SecondCorner.X));
            pairs.Add(new DxfCodePair(21, SecondCorner.Y));
            pairs.Add(new DxfCodePair(31, SecondCorner.Z));
            pairs.Add(new DxfCodePair(12, ThirdCorner.X));
            pairs.Add(new DxfCodePair(22, ThirdCorner.Y));
            pairs.Add(new DxfCodePair(32, ThirdCorner.Z));
            pairs.Add(new DxfCodePair(13, FourthCorner.X));
            pairs.Add(new DxfCodePair(23, FourthCorner.Y));
            pairs.Add(new DxfCodePair(33, FourthCorner.Z));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (Thickness)));
            }

            if (this.ExtrusionDirection != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
                pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
                pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            if (base.TrySetPair(pair)) return true;
            switch (pair.Code)
            {
                case 10:
                    this.FirstCorner.X = pair.DoubleValue;
                    break;
                case 20:
                    this.FirstCorner.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.FirstCorner.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.SecondCorner.X = pair.DoubleValue;
                    break;
                case 21:
                    this.SecondCorner.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.SecondCorner.Z = pair.DoubleValue;
                    break;
                case 12:
                    this.ThirdCorner.X = pair.DoubleValue;
                    break;
                case 22:
                    this.ThirdCorner.Y = pair.DoubleValue;
                    break;
                case 32:
                    this.ThirdCorner.Z = pair.DoubleValue;
                    break;
                case 13:
                    this.FourthCorner.X = pair.DoubleValue;
                    break;
                case 23:
                    this.FourthCorner.Y = pair.DoubleValue;
                    break;
                case 33:
                    this.FourthCorner.Z = pair.DoubleValue;
                    break;
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 210:
                    this.ExtrusionDirection.X = pair.DoubleValue;
                    break;
                case 220:
                    this.ExtrusionDirection.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.ExtrusionDirection.Z = pair.DoubleValue;
                    break;
                default:
                    return false;
            }

            return true;
        }
    }

    /// <summary>
    /// DxfText class
    /// </summary>
    public partial class DxfText : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Text; } }

        public double Thickness { get; set; }

        public DxfPoint Location { get; set; }

        public double TextHeight { get; set; }

        public string Value { get; set; }

        public double Rotation { get; set; }

        public double RelativeXScaleFactor { get; set; }

        public double ObliqueAngle { get; set; }

        public string TextStyleName { get; set; }

        public int TextGenerationFlags { get; set; }

        public DxfHorizontalTextJustification HorizontalTextJustification { get; set; }

        public DxfPoint SecondAlignmentPoint { get; set; }

        public DxfVector Normal { get; set; }

        public DxfVerticalTextJustification VerticalTextJustification { get; set; }

        // TextGenerationFlags flags
        public bool IsTextBackward
        {
            get { return DxfHelpers.GetFlag(TextGenerationFlags, 2); }
            set
            {
                var flags = TextGenerationFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                TextGenerationFlags = flags;
            }
        }

        public bool IsTextUpsideDown
        {
            get { return DxfHelpers.GetFlag(TextGenerationFlags, 4); }
            set
            {
                var flags = TextGenerationFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                TextGenerationFlags = flags;
            }
        }

        public DxfText()
            : base()
        {
            this.Thickness = 0.0;
            this.Location = DxfPoint.Origin;
            this.TextHeight = 1.0;
            this.Value = null;
            this.Rotation = 0;
            this.RelativeXScaleFactor = 1.0;
            this.ObliqueAngle = 0.0;
            this.TextStyleName = "STANDARD";
            this.TextGenerationFlags = 0;
            this.HorizontalTextJustification = DxfHorizontalTextJustification.Left;
            this.SecondAlignmentPoint = DxfPoint.Origin;
            this.Normal = DxfVector.ZAxis;
            this.VerticalTextJustification = DxfVerticalTextJustification.Baseline;
        }

        //
        // Parameterized constructors
        //
        public DxfText(DxfPoint location, double textHeight, string value)
            : this()
        {
            this.Location = location;
            this.TextHeight = textHeight;
            this.Value = value;
        }

        protected override void AddValuePairs(IList<DxfCodePair> pairs)
        {
            base.AddValuePairs(pairs);
            pairs.Add(new DxfCodePair(100, "AcDbText"));
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, (Thickness)));
            }

            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            pairs.Add(new DxfCodePair(40, (TextHeight)));
            pairs.Add(new DxfCodePair(1, (Value)));
            if (this.Rotation != 0)
            {
                pairs.Add(new DxfCodePair(50, (Rotation)));
            }

            if (this.RelativeXScaleFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(41, (RelativeXScaleFactor)));
            }

            if (this.ObliqueAngle != 0.0)
            {
                pairs.Add(new DxfCodePair(51, (ObliqueAngle)));
            }

            if (this.TextStyleName != "STANDARD")
            {
                pairs.Add(new DxfCodePair(7, (TextStyleName)));
            }

            if (this.TextGenerationFlags != 0)
            {
                pairs.Add(new DxfCodePair(71, (short)(TextGenerationFlags)));
            }

            if (this.HorizontalTextJustification != DxfHorizontalTextJustification.Left)
            {
                pairs.Add(new DxfCodePair(72, (short)(HorizontalTextJustification)));
            }

            pairs.Add(new DxfCodePair(11, SecondAlignmentPoint.X));
            pairs.Add(new DxfCodePair(21, SecondAlignmentPoint.Y));
            pairs.Add(new DxfCodePair(31, SecondAlignmentPoint.Z));
            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal.X));
                pairs.Add(new DxfCodePair(220, Normal.Y));
                pairs.Add(new DxfCodePair(230, Normal.Z));
            }

            if (this.VerticalTextJustification != DxfVerticalTextJustification.Baseline)
            {
                pairs.Add(new DxfCodePair(73, (short)(VerticalTextJustification)));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            if (base.TrySetPair(pair)) return true;
            switch (pair.Code)
            {
                case 39:
                    this.Thickness = (pair.DoubleValue);
                    break;
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 40:
                    this.TextHeight = (pair.DoubleValue);
                    break;
                case 1:
                    this.Value = (pair.StringValue);
                    break;
                case 50:
                    this.Rotation = (pair.DoubleValue);
                    break;
                case 41:
                    this.RelativeXScaleFactor = (pair.DoubleValue);
                    break;
                case 51:
                    this.ObliqueAngle = (pair.DoubleValue);
                    break;
                case 7:
                    this.TextStyleName = (pair.StringValue);
                    break;
                case 71:
                    this.TextGenerationFlags = (int)(pair.ShortValue);
                    break;
                case 72:
                    this.HorizontalTextJustification = (DxfHorizontalTextJustification)(pair.ShortValue);
                    break;
                case 11:
                    this.SecondAlignmentPoint.X = pair.DoubleValue;
                    break;
                case 21:
                    this.SecondAlignmentPoint.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.SecondAlignmentPoint.Z = pair.DoubleValue;
                    break;
                case 210:
                    this.Normal.X = pair.DoubleValue;
                    break;
                case 220:
                    this.Normal.Y = pair.DoubleValue;
                    break;
                case 230:
                    this.Normal.Z = pair.DoubleValue;
                    break;
                case 73:
                    this.VerticalTextJustification = (DxfVerticalTextJustification)(pair.ShortValue);
                    break;
                default:
                    return false;
            }

            return true;
        }
    }

    /// <summary>
    /// DxfVertex class
    /// </summary>
    public partial class DxfVertex : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Vertex; } }

        public DxfPoint Location { get; set; }

        public double StartingWidth { get; set; }

        public double EndingWidth { get; set; }

        public double Bulge { get; set; }

        public int Flags { get; set; }

        public double CurveFitTangentDirection { get; set; }

        public int PolyfaceMeshVertexIndex1 { get; set; }

        public int PolyfaceMeshVertexIndex2 { get; set; }

        public int PolyfaceMeshVertexIndex3 { get; set; }

        public int PolyfaceMeshVertexIndex4 { get; set; }

        // Flags flags
        public bool IsExtraCreatedByCurveFit
        {
            get { return DxfHelpers.GetFlag(Flags, 1); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                Flags = flags;
            }
        }

        public bool IsCurveFitTangentDefined
        {
            get { return DxfHelpers.GetFlag(Flags, 2); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                Flags = flags;
            }
        }

        public bool IsSplineVertexCreatedBySplineFitting
        {
            get { return DxfHelpers.GetFlag(Flags, 8); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                Flags = flags;
            }
        }

        public bool IsSplineFrameControlPoint
        {
            get { return DxfHelpers.GetFlag(Flags, 16); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 16);
                Flags = flags;
            }
        }

        public bool Is3DPolylineVertex
        {
            get { return DxfHelpers.GetFlag(Flags, 32); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 32);
                Flags = flags;
            }
        }

        public bool Is3DPolygonMesh
        {
            get { return DxfHelpers.GetFlag(Flags, 64); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 64);
                Flags = flags;
            }
        }

        public bool IsPolyfaceMeshVertex
        {
            get { return DxfHelpers.GetFlag(Flags, 128); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 128);
                Flags = flags;
            }
        }

        public DxfVertex()
            : base()
        {
            this.Location = DxfPoint.Origin;
            this.StartingWidth = 0.0;
            this.EndingWidth = 0.0;
            this.Bulge = 0.0;
            this.Flags = 0;
            this.CurveFitTangentDirection = 0.0;
            this.PolyfaceMeshVertexIndex1 = 0;
            this.PolyfaceMeshVertexIndex2 = 0;
            this.PolyfaceMeshVertexIndex3 = 0;
            this.PolyfaceMeshVertexIndex4 = 0;
        }

        //
        // Parameterized constructors
        //
        public DxfVertex(DxfPoint location)
            : this()
        {
            this.Location = location;
        }

        protected override void AddValuePairs(IList<DxfCodePair> pairs)
        {
            base.AddValuePairs(pairs);
            pairs.Add(new DxfCodePair(100, "AcDbVertex"));
            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            if (this.StartingWidth != 0.0)
            {
                pairs.Add(new DxfCodePair(40, (StartingWidth)));
            }

            if (this.EndingWidth != 0.0)
            {
                pairs.Add(new DxfCodePair(41, (EndingWidth)));
            }

            if (this.Bulge != 0.0)
            {
                pairs.Add(new DxfCodePair(42, (Bulge)));
            }

            pairs.Add(new DxfCodePair(70, (short)(Flags)));
            pairs.Add(new DxfCodePair(50, (CurveFitTangentDirection)));
            if (this.PolyfaceMeshVertexIndex1 != 0)
            {
                pairs.Add(new DxfCodePair(71, (short)(PolyfaceMeshVertexIndex1)));
            }

            if (this.PolyfaceMeshVertexIndex2 != 0)
            {
                pairs.Add(new DxfCodePair(72, (short)(PolyfaceMeshVertexIndex2)));
            }

            if (this.PolyfaceMeshVertexIndex3 != 0)
            {
                pairs.Add(new DxfCodePair(73, (short)(PolyfaceMeshVertexIndex3)));
            }

            if (this.PolyfaceMeshVertexIndex4 != 0)
            {
                pairs.Add(new DxfCodePair(74, (short)(PolyfaceMeshVertexIndex4)));
            }

        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            if (base.TrySetPair(pair)) return true;
            switch (pair.Code)
            {
                case 10:
                    this.Location.X = pair.DoubleValue;
                    break;
                case 20:
                    this.Location.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.Location.Z = pair.DoubleValue;
                    break;
                case 40:
                    this.StartingWidth = (pair.DoubleValue);
                    break;
                case 41:
                    this.EndingWidth = (pair.DoubleValue);
                    break;
                case 42:
                    this.Bulge = (pair.DoubleValue);
                    break;
                case 70:
                    this.Flags = (int)(pair.ShortValue);
                    break;
                case 50:
                    this.CurveFitTangentDirection = (pair.DoubleValue);
                    break;
                case 71:
                    this.PolyfaceMeshVertexIndex1 = (int)(pair.ShortValue);
                    break;
                case 72:
                    this.PolyfaceMeshVertexIndex2 = (int)(pair.ShortValue);
                    break;
                case 73:
                    this.PolyfaceMeshVertexIndex3 = (int)(pair.ShortValue);
                    break;
                case 74:
                    this.PolyfaceMeshVertexIndex4 = (int)(pair.ShortValue);
                    break;
                default:
                    return false;
            }

            return true;
        }
    }

}
