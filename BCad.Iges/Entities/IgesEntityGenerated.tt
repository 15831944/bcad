<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#
var xml = XDocument.Load(this.Host.ResolvePath(@"IgesEntitySpec.xml")).Root;
var xmlns = xml.Name.NamespaceName;
var entities = xml.Elements(XName.Get("Entity", xmlns));
#>
// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System.Collections.Generic;
using BCad.Iges.Directory;

namespace BCad.Iges.Entities
{
    public enum IgesEntityType
    {
<#
foreach (var entity in entities.OrderBy(e => TypeCode(e)))
{
#>
        <#= EntityType(entity) #> = <#= TypeCode(entity) #>,
<#
}
#>
    }

    public partial class IgesEntity
    {
        internal static IgesEntity FromData(IgesDirectoryData directoryData, IList<string> parameters)
        {
            IgesEntity entity = null;
            switch (directoryData.EntityType)
            {
<#
foreach (var entity in entities.OrderBy(e => EntityType(e)))
{
#>
                case IgesEntityType.<#= EntityType(entity) #>:
                    entity = new <#= Name(entity) #>();
                    break;
<#
}
#>
            }

            if (entity != null)
            {
                entity.PopulateDirectoryData(directoryData);
                entity.ReadParameters(parameters);
            }

            return entity;
        }
    }

<#
foreach (var entity in entities)
{
#>
    /// <summary>
    /// <#= Name(entity) #> class
    /// </summary>
    public partial class <#= Name(entity) #> : IgesEntity
    {
        public override IgesEntityType EntityType { get { return IgesEntityType.<#= EntityType(entity) #>; } }

        // properties
<#
	foreach (var property in Properties(entity))
	{
#>
        public <#= Type(property) #> <#= Name(property) #> { get; set; }
<#
	} // foreach property
#>

<#
	var customProperties = CustomProperties(entity);
	if (customProperties.Any())
	{
#>
        // custom properties
<#
		foreach (var custom in CustomProperties(entity))
		{
#>
        public <#= Overrides(custom) #><#= Type(custom) #> <#= Name(custom) #>
        {
            get
            {
<#= Indent(Get(custom), "                ") #>
            }
            set
            {
<#= Indent(Set(custom), "                ") #>
            }
        }

<#
		} // foreach custom
	} // if customProperties.Any()
#>
        public <#= Name(entity) #>()
            : base()
        {
<#
	foreach (var property in Properties(entity))
	{
#>
            this.<#= Name(property) #> = <#= DefaultValue(property) #>;
<#
	} // foreach property
#>
        }

        protected override void ReadParameters(IList<string> parameters)
        {
<#
	int index = 0;
	foreach (var property in Properties(entity))
	{
#>
            this.<#= Name(property) #> = <#= Converter(property) #>(parameters[<#= index #>]);
<#
		index++;
	} // foreach property
#>
        }

        protected override void WriteParameters(IList<object> parameters)
        {
<#
	foreach (var property in Properties(entity))
	{
#>
            parameters.Add(this.<#= Name(property) #>);
<#
	}
#>
        }
    }

<#
} // foreach entity
#>
}
<#+
int TypeCode(XElement entity)
{
	return int.Parse(entity.Attribute("TypeCode").Value);
}

string EntityType(XElement entity)
{
	return entity.Attribute("EntityType").Value;
}

string Name(XElement entity)
{
	return entity.Attribute("Name").Value;
}

IEnumerable<XElement> Properties(XElement entity)
{
	return entity.Elements(XName.Get("Property", entity.Name.NamespaceName));
}

IEnumerable<XElement> CustomProperties(XElement entity)
{
	return entity.Elements(XName.Get("CustomProperty", entity.Name.NamespaceName));
}

string Get(XElement customProperty)
{
	return CDataValue(customProperty, "Get");
}

string Set(XElement customProperty)
{
	return CDataValue(customProperty, "Set");
}

string Indent(string value, string indention)
{
	var parts = value.Trim().Split('\n').Select(s => s.Trim());
	return string.Join("\r\n", parts.Select(s => indention + s));
}

string CDataValue(XElement xml, string element)
{
	var data = xml.Element(XName.Get(element, xml.Name.NamespaceName)).Value.Trim();
	return data;
}

string Type(XElement property)
{
	return property.Attribute("Type").Value;
}

string DefaultValue(XElement property)
{
	return property.Attribute("DefaultValue").Value;
}

string Converter(XElement property)
{
	string converter = string.Empty;
	switch (Type(property))
	{
		case "double":
			converter = "double.Parse";
			break;
		default:
			this.Warning("Unsupported converter type: " + Type(property));
			break;
	}

	return converter;
}

string Overrides(XElement customProperty)
{
	var att = customProperty.Attribute("Overrides");
	var isOverride = att != null && bool.Parse(att.Value);
	return isOverride ? "override " : "";
}
#>