// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System.Collections.Generic;
using System.Linq;
using BCad.Iges.Directory;

namespace BCad.Iges.Entities
{
    public enum IgesEntityType
    {
        CircularArc = 100,
        Line = 110,
        Point = 116,
        TransformationMatrix = 124,
        SubfigureDefinition = 308,
    }

    public partial class IgesEntity
    {
        internal static IgesEntity FromData(IgesDirectoryData directoryData, List<string> parameters)
        {
            IgesEntity entity = null;
            switch (directoryData.EntityType)
            {
                case IgesEntityType.CircularArc:
                    entity = new IgesCircularArc();
                    break;
                case IgesEntityType.Line:
                    entity = new IgesLine();
                    break;
                case IgesEntityType.Point:
                    entity = new IgesLocation();
                    break;
                case IgesEntityType.SubfigureDefinition:
                    entity = new IgesSubfigureDefinition();
                    break;
                case IgesEntityType.TransformationMatrix:
                    entity = new IgesTransformationMatrix();
                    break;
            }

            if (entity != null)
            {
                entity.PopulateDirectoryData(directoryData);
                entity.ReadParameters(parameters);
            }

            return entity;
        }
    }

    /// <summary>
    /// IgesCircularArc class
    /// </summary>
    public partial class IgesCircularArc : IgesEntity
    {
        public override IgesEntityType EntityType { get { return IgesEntityType.CircularArc; } }

        // properties
        public double PlaneDisplacement { get; set; }
        public IgesPoint Center { get; set; }
        public IgesPoint StartPoint { get; set; }
        public IgesPoint EndPoint { get; set; }

        public IgesCircularArc()
            : base()
        {
            this.PlaneDisplacement = 0.0;
            this.Center = IgesPoint.Origin;
            this.StartPoint = IgesPoint.Origin;
            this.EndPoint = IgesPoint.Origin;
        }

        protected override void ReadParameters(List<string> parameters)
        {
            int index = 0;
            this.PlaneDisplacement = Double(parameters[index++]);
            this.Center.X = Double(parameters[index++]);
            this.Center.Y = Double(parameters[index++]);
            this.StartPoint.X = Double(parameters[index++]);
            this.StartPoint.Y = Double(parameters[index++]);
            this.EndPoint.X = Double(parameters[index++]);
            this.EndPoint.Y = Double(parameters[index++]);
        }

        protected override void WriteParameters(List<object> parameters)
        {
            parameters.Add(this.PlaneDisplacement);
            parameters.Add(this.Center.X);
            parameters.Add(this.Center.Y);
            parameters.Add(this.StartPoint.X);
            parameters.Add(this.StartPoint.Y);
            parameters.Add(this.EndPoint.X);
            parameters.Add(this.EndPoint.Y);
        }
    }

    /// <summary>
    /// IgesLine class
    /// </summary>
    public partial class IgesLine : IgesEntity
    {
        public override IgesEntityType EntityType { get { return IgesEntityType.Line; } }

        // properties
        public IgesPoint P1 { get; set; }
        public IgesPoint P2 { get; set; }

        // custom properties
        public override int LineCount
        {
            get
            {
                return 1;
            }
        }

        public IgesBounding Bounding
        {
            get
            {
                return (IgesBounding)FormNumber;
            }
            set
            {
                FormNumber = (int)value;
            }
        }

        public IgesLine()
            : base()
        {
            this.P1 = IgesPoint.Origin;
            this.P2 = IgesPoint.Origin;
        }

        protected override void ReadParameters(List<string> parameters)
        {
            int index = 0;
            this.P1.X = Double(parameters[index++]);
            this.P1.Y = Double(parameters[index++]);
            this.P1.Z = Double(parameters[index++]);
            this.P2.X = Double(parameters[index++]);
            this.P2.Y = Double(parameters[index++]);
            this.P2.Z = Double(parameters[index++]);
        }

        protected override void WriteParameters(List<object> parameters)
        {
            parameters.Add(this.P1.X);
            parameters.Add(this.P1.Y);
            parameters.Add(this.P1.Z);
            parameters.Add(this.P2.X);
            parameters.Add(this.P2.Y);
            parameters.Add(this.P2.Z);
        }
    }

    /// <summary>
    /// IgesLocation class
    /// </summary>
    public partial class IgesLocation : IgesEntity
    {
        public override IgesEntityType EntityType { get { return IgesEntityType.Point; } }

        // properties
        public IgesPoint Location { get; set; }

        public IgesLocation()
            : base()
        {
            this.Location = IgesPoint.Origin;
        }

        protected override void ReadParameters(List<string> parameters)
        {
            int index = 0;
            this.Location.X = Double(parameters[index++]);
            this.Location.Y = Double(parameters[index++]);
            this.Location.Z = Double(parameters[index++]);
        }

        protected override void WriteParameters(List<object> parameters)
        {
            parameters.Add(this.Location.X);
            parameters.Add(this.Location.Y);
            parameters.Add(this.Location.Z);
        }
    }

    /// <summary>
    /// IgesTransformationMatrix class
    /// </summary>
    public partial class IgesTransformationMatrix : IgesEntity
    {
        public override IgesEntityType EntityType { get { return IgesEntityType.TransformationMatrix; } }

        // properties
        public double R11 { get; set; }
        public double R12 { get; set; }
        public double R13 { get; set; }
        public double T1 { get; set; }
        public double R21 { get; set; }
        public double R22 { get; set; }
        public double R23 { get; set; }
        public double T2 { get; set; }
        public double R31 { get; set; }
        public double R32 { get; set; }
        public double R33 { get; set; }
        public double T3 { get; set; }

        public IgesTransformationMatrix()
            : base()
        {
            this.R11 = 0.0;
            this.R12 = 0.0;
            this.R13 = 0.0;
            this.T1 = 0.0;
            this.R21 = 0.0;
            this.R22 = 0.0;
            this.R23 = 0.0;
            this.T2 = 0.0;
            this.R31 = 0.0;
            this.R32 = 0.0;
            this.R33 = 0.0;
            this.T3 = 0.0;
        }

        protected override void ReadParameters(List<string> parameters)
        {
            int index = 0;
            this.R11 = Double(parameters[index++]);
            this.R12 = Double(parameters[index++]);
            this.R13 = Double(parameters[index++]);
            this.T1 = Double(parameters[index++]);
            this.R21 = Double(parameters[index++]);
            this.R22 = Double(parameters[index++]);
            this.R23 = Double(parameters[index++]);
            this.T2 = Double(parameters[index++]);
            this.R31 = Double(parameters[index++]);
            this.R32 = Double(parameters[index++]);
            this.R33 = Double(parameters[index++]);
            this.T3 = Double(parameters[index++]);
        }

        protected override void WriteParameters(List<object> parameters)
        {
            parameters.Add(this.R11);
            parameters.Add(this.R12);
            parameters.Add(this.R13);
            parameters.Add(this.T1);
            parameters.Add(this.R21);
            parameters.Add(this.R22);
            parameters.Add(this.R23);
            parameters.Add(this.T2);
            parameters.Add(this.R31);
            parameters.Add(this.R32);
            parameters.Add(this.R33);
            parameters.Add(this.T3);
        }
    }

    /// <summary>
    /// IgesSubfigureDefinition class
    /// </summary>
    public partial class IgesSubfigureDefinition : IgesEntity
    {
        public override IgesEntityType EntityType { get { return IgesEntityType.SubfigureDefinition; } }

        // properties
        public int Depth { get; set; }
        public string Name { get; set; }
        private int EntityCount { get; set; }

        // custom properties
        public List<IgesEntity> Entities
        {
            get
            {
                return SubEntities;
            }
        }

        public IgesSubfigureDefinition()
            : base()
        {
            this.Depth = 0;
            this.Name = null;
            this.EntityCount = 0;
        }

        protected override void ReadParameters(List<string> parameters)
        {
            int index = 0;
            this.Depth = Integer(parameters[index++]);
            this.Name = String(parameters[index++]);
            this.EntityCount = Integer(parameters[index++]);
            for (int i = 0; i < EntityCount; i++)
            {
                this.SubEntityIndices.Add(Integer(parameters[index++]));
            }

        }

        protected override void WriteParameters(List<object> parameters)
        {
            parameters.Add(this.Depth);
            parameters.Add(this.Name);
            parameters.Add(this.Entities.Count);
            parameters.AddRange(this.SubEntityIndices.Cast<object>());
        }
    }

}
