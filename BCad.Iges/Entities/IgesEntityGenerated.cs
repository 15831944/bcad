// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System.Collections.Generic;
using BCad.Iges.Directory;

namespace BCad.Iges.Entities
{
    public enum IgesEntityType
    {
        CircularArc = 100,
        Line = 110,
        TransformationMatrix = 124,
    }

    public partial class IgesEntity
    {
        internal static IgesEntity FromData(IgesDirectoryData directoryData, IList<string> parameters)
        {
            IgesEntity entity = null;
            switch (directoryData.EntityType)
            {
                case IgesEntityType.CircularArc:
                    entity = new IgesCircularArc();
                    break;
                case IgesEntityType.Line:
                    entity = new IgesLine();
                    break;
                case IgesEntityType.TransformationMatrix:
                    entity = new IgesTransformationMatrix();
                    break;
            }

            if (entity != null)
            {
                entity.PopulateDirectoryData(directoryData);
                entity.ReadParameters(parameters);
            }

            return entity;
        }
    }

    /// <summary>
    /// IgesCircularArc class
    /// </summary>
    public partial class IgesCircularArc : IgesEntity
    {
        public override IgesEntityType EntityType { get { return IgesEntityType.CircularArc; } }

        // properties
        public double ZT { get; set; }
        public double X1 { get; set; }
        public double Y1 { get; set; }
        public double X2 { get; set; }
        public double Y2 { get; set; }
        public double X3 { get; set; }
        public double Y3 { get; set; }

        // custom properties
        public double PlaneDisplacement
        {
            get
            {
                return ZT;
            }
            set
            {
                ZT = value;
            }
        }

        public IgesPoint Center
        {
            get
            {
                return new IgesPoint(X1, Y1, 0.0);
            }
            set
            {
                X1 = value.X;
                Y1 = value.Y;
            }
        }

        public IgesPoint StartPoint
        {
            get
            {
                return new IgesPoint(X2, Y2, 0.0);
            }
            set
            {
                X2 = value.X;
                Y2 = value.Y;
            }
        }

        public IgesPoint EndPoint
        {
            get
            {
                return new IgesPoint(X3, Y3, 0.0);
            }
            set
            {
                X3 = value.X;
                Y3 = value.Y;
            }
        }

        public IgesCircularArc()
            : base()
        {
            this.ZT = 0.0;
            this.X1 = 0.0;
            this.Y1 = 0.0;
            this.X2 = 0.0;
            this.Y2 = 0.0;
            this.X3 = 0.0;
            this.Y3 = 0.0;
        }

        protected override void ReadParameters(IList<string> parameters)
        {
            this.ZT = double.Parse(parameters[0]);
            this.X1 = double.Parse(parameters[1]);
            this.Y1 = double.Parse(parameters[2]);
            this.X2 = double.Parse(parameters[3]);
            this.Y2 = double.Parse(parameters[4]);
            this.X3 = double.Parse(parameters[5]);
            this.Y3 = double.Parse(parameters[6]);
        }

        protected override void WriteParameters(IList<object> parameters)
        {
            parameters.Add(this.ZT);
            parameters.Add(this.X1);
            parameters.Add(this.Y1);
            parameters.Add(this.X2);
            parameters.Add(this.Y2);
            parameters.Add(this.X3);
            parameters.Add(this.Y3);
        }
    }

    /// <summary>
    /// IgesLine class
    /// </summary>
    public partial class IgesLine : IgesEntity
    {
        public override IgesEntityType EntityType { get { return IgesEntityType.Line; } }

        // properties
        public double X1 { get; set; }
        public double Y1 { get; set; }
        public double Z1 { get; set; }
        public double X2 { get; set; }
        public double Y2 { get; set; }
        public double Z2 { get; set; }

        // custom properties
        public override int LineCount
        {
            get
            {
                return 1;
            }
            set
            {
                
            }
        }

        public IgesPoint P1
        {
            get
            {
                return new IgesPoint(X1, Y1, Z1);
            }
            set
            {
                X1 = value.X;
                Y1 = value.Y;
                Z1 = value.Z;
            }
        }

        public IgesPoint P2
        {
            get
            {
                return new IgesPoint(X2, Y2, Z2);
            }
            set
            {
                X2 = value.X;
                Y2 = value.Y;
                Z2 = value.Z;
            }
        }

        public IgesBounding Bounding
        {
            get
            {
                return (IgesBounding)FormNumber;
            }
            set
            {
                FormNumber = (int)value;
            }
        }

        public IgesLine()
            : base()
        {
            this.X1 = 0.0;
            this.Y1 = 0.0;
            this.Z1 = 0.0;
            this.X2 = 0.0;
            this.Y2 = 0.0;
            this.Z2 = 0.0;
        }

        protected override void ReadParameters(IList<string> parameters)
        {
            this.X1 = double.Parse(parameters[0]);
            this.Y1 = double.Parse(parameters[1]);
            this.Z1 = double.Parse(parameters[2]);
            this.X2 = double.Parse(parameters[3]);
            this.Y2 = double.Parse(parameters[4]);
            this.Z2 = double.Parse(parameters[5]);
        }

        protected override void WriteParameters(IList<object> parameters)
        {
            parameters.Add(this.X1);
            parameters.Add(this.Y1);
            parameters.Add(this.Z1);
            parameters.Add(this.X2);
            parameters.Add(this.Y2);
            parameters.Add(this.Z2);
        }
    }

    /// <summary>
    /// IgesTransformationMatrix class
    /// </summary>
    public partial class IgesTransformationMatrix : IgesEntity
    {
        public override IgesEntityType EntityType { get { return IgesEntityType.TransformationMatrix; } }

        // properties
        public double R11 { get; set; }
        public double R12 { get; set; }
        public double R13 { get; set; }
        public double T1 { get; set; }
        public double R21 { get; set; }
        public double R22 { get; set; }
        public double R23 { get; set; }
        public double T2 { get; set; }
        public double R31 { get; set; }
        public double R32 { get; set; }
        public double R33 { get; set; }
        public double T3 { get; set; }

        public IgesTransformationMatrix()
            : base()
        {
            this.R11 = 0.0;
            this.R12 = 0.0;
            this.R13 = 0.0;
            this.T1 = 0.0;
            this.R21 = 0.0;
            this.R22 = 0.0;
            this.R23 = 0.0;
            this.T2 = 0.0;
            this.R31 = 0.0;
            this.R32 = 0.0;
            this.R33 = 0.0;
            this.T3 = 0.0;
        }

        protected override void ReadParameters(IList<string> parameters)
        {
            this.R11 = double.Parse(parameters[0]);
            this.R12 = double.Parse(parameters[1]);
            this.R13 = double.Parse(parameters[2]);
            this.T1 = double.Parse(parameters[3]);
            this.R21 = double.Parse(parameters[4]);
            this.R22 = double.Parse(parameters[5]);
            this.R23 = double.Parse(parameters[6]);
            this.T2 = double.Parse(parameters[7]);
            this.R31 = double.Parse(parameters[8]);
            this.R32 = double.Parse(parameters[9]);
            this.R33 = double.Parse(parameters[10]);
            this.T3 = double.Parse(parameters[11]);
        }

        protected override void WriteParameters(IList<object> parameters)
        {
            parameters.Add(this.R11);
            parameters.Add(this.R12);
            parameters.Add(this.R13);
            parameters.Add(this.T1);
            parameters.Add(this.R21);
            parameters.Add(this.R22);
            parameters.Add(this.R23);
            parameters.Add(this.T2);
            parameters.Add(this.R31);
            parameters.Add(this.R32);
            parameters.Add(this.R33);
            parameters.Add(this.T3);
        }
    }

}
